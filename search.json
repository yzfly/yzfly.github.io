[{"url":"/2019/03/03/Machine-Learning-1/","content":"```\ntitle: 特征提取——局部特征\ndate: 2018-07-16 09:39:40\ntags: [GitHub, Mysql]\nmathjax: true\n```\n\n# Machine Learning-1\n\ngoogle 机器学习速成教程笔记\n\n[机器学习速成课程]: https://developers.google.cn/machine-learning/crash-course/\n\n<!-- more -->\n\n## 1、术语：\n\n下面以对电子邮件数据处理为例子\n\n* **标签**： 我们要预测的真实事物-y，邮件为垃圾邮件还是正常邮件\n\n* **特征**：用于描述数据的输入变量 $x_i$，eg：邮件的各个维度特征\n\n  * 多维度特征按如下方式指定： $\\{x_1,x_2,...x_N\\}$ \n  * 实用特征： 可观察、可量化的指标。 不可量化的比如美观程度等不适合作为特征\n\n* **样本**：数据的特定实例。 eg:  一封邮件\n\n  * 有标签样本：具有｛特征，标签｝，即｛x,y｝的数据，既包含特征又包含标签\n    * 用于训练模型\n  * 无标签样本： 只具有｛特征，？｝，即｛x，？}的数据，只包含特征不包含标签\n    * 用于验证模型或者对新数据做出预测\n\n* **模型**： 定义了特征与标签之间的关系。可将样本映射到预测标签： $y^{’}$ 。下面是模型生命周期的两个阶段：\n\n  > 由模型的内部参数来定义，该模型的内部参数是由学习获得\n\n  * 训练：创建或者学习模型。向模型展示有标签样本，让模型学习特征与样本之间的关系。\n  * 推断：将训练后的样本应用与无标签样本。\n\n* **回归与分类：** \n\n  * 回归模型可预测连续值——比如预测概率\n  * 分类模型可预测离散值\n\n## 2、深入了解机器学习\n\n### 线性回归\n\n对蟋蟀叫声频率和温度之间的关系建立模型：\n$$\ny = mx+b\n$$\n在机器学习中，习惯使用下面的表示方法：\n$$\ny^{'} =b+w_1x_1+w_2x_2+w_3x_3\n$$\n其中：\n\n* $y^{'}$ 是指预测标签(理想输出值)\n* $b$ 指的是偏差，y轴截距，有的地方也使用$w_0$ 表示\n* $w_i$ 表示的是特征1的权重。权重与“斜率”这一概念表示的意思相近\n* $x_i$ 指的是特征，即已知输入项\n\n### 训练与损失\n\n**损失** 是一个数值表示对于单个样本而言模型预测的准确程度。模型的预测100%准确，则模型的损失为0，否则损失会比较大。训练模型的目标是从所有样本中找到一组使得损失函数平均损失“较小”的权重和偏差。\n\n**eg:** 在蟋蟀的例子中，损失为单个样本点到拟合直线的距离，总损失表征了模型的优劣。\n\n\n\n**常用损失函数-平方损失** ：\n\n* 平方损失在线性回归模型中使用频繁，又称为$L_2$ 损失，单个样本的平方损失为 $(y-y_i)^2$\n\n* 均方误差（MSE）指的是每个样本的平均平方损失。MSE的计算方法为，求出各个样本的所有平方损失之和，除以样本量：\n  $$\n  MSE = \\frac{1}{N}\\sum_{(x,y)\\in{D}}(y-y^{’}(x))\n  $$\n\n  * 其中 (x,y) 指的是样本\n    * x 指的是模型进行预测时使用的特征集\n    * y指的是样本的标签\n  * $y^{’}(x) $ 指的是权重和偏差与特征集 x结合的函数\n  * D 指的是多个包含有标签样本( 即 (x,y) )的数据集\n  * N指的是D中样本的数量\n\n### 降低损失(Reducing Loss)\n\n最佳模型是使得损失函数值最小的模型。\n\n通过计算整个数据集中 w1 每个可能值的损失函数来找到收敛点这种方法效率太低。我们来研究一种更好的机制，这种机制在机器学习领域非常热门，称为**梯度下降法**。 \n\n回归问题产生的损失与权重图为凸型，凸型问题只有一个最小值点，这个最小值就是损失函数收敛之处。下面使用线性回归问题来举例说明\n\n#### **梯度下降法**\n\n为了寻找使得损失函数最小的模型参数，对建立的损失函数(自变量为模型参数)寻找极小值点，寻找方法为计算迭代点的梯度，改变模型参数使损失函数沿负梯度方向前进。通常，可以不断进行迭代，直到总体损失不再变化或者变化极其缓慢为止，此时我们说该模型已收敛。\n\n> 梯度为一个矢量： 具有方向和大小两个特征。梯度始终朝着损失函数增长最迅猛的方向，同理，负梯度方向即为损失函数减少最迅猛的方向。梯度下降算法会沿着负梯度的方向走一步，以便尽快降低损失。\n\n**起点：** 梯度下降法的第一个阶段是为 w1选择一个起始值，称为起点。起点并不重要，因此很多算法直接将起点设置为0或随机选择一个值。\n\n**下一个点：** 梯度下降算法依赖与负梯度。为了确定损失函数曲线上的下一个点，梯度下降算法将梯度大小的一部分与起点相加，一个梯度步长将迭代点移动到损失曲线上的下一个点，如下图所示：\n\n![1532479162926](F:\\Docs\\git\\study\\md\\ML\\media\\TD.png)\n\n机器学习算法用于训练模型的迭代试错过程如下图所示：\n\n![](F:\\Docs\\git\\study\\md\\ML\\media\\ML-try.png)\n\n在模型训练过程中，可以在每一步骤上计算整个数据集的梯度。但如此计算量太大，实际运用中计算小型数据样本的梯度效果就已经很好。所以实际可使用下面的方法降低损失。\n\n#### SGD和小批量梯度下降法\n\n* 随机梯度下降法： 依次抽取一个样本\n* 小批量梯度下降法： 每批包含 10~1000个样本\n  * 损失和梯度在整体范围内达到平衡\n\n#### 学习速率\n\n学习速率也称为步长。在梯度下降算法中，使用  梯度*学习速率 来确定下一个点的位置。即\n$$\nx_{i+1} = x_i+k*grad(x_i)\n$$\n其中 $x_i$ 为当前点位置，$x_{i+1}$ 为下一个点位置，$k$ 为学习速率，$grad(x_i)$ 为当前点的梯度。\n\n* 学习速率不宜过大也不宜过小，过小会导致学习时间过长，过大容易导致学习过程不收敛。如果已知损失函数的梯度较小，则采用较大的学习速率，如梯度较大，则采用较小的学习速率。\n\n#### 随机梯度下降法(SGD)\n\n大数据集或者超大数据集中，常常使用批量梯度下降法。**批量** 指的是在单次迭代中用于计算梯度的样本总数。\n\n包含随机抽样样本的大型数据集可能包含冗余数据。批量越大，出现冗余的可能性越高。为了估算出损失函数的平均梯度(对整个数据集而言)，同时减小计算量，可以通过从我们的数据集中随机选择样本，通过随机选择的小样本集来估算出总体的平均值。**SGD**将这种方法运用到极致，每次迭代只使用一个样本。\n\n**小批量SGD**是介于全批量SGD和SGD之间的折衷方案，小批量一般包含10~1000个随机选择的样本。既减小了SGD中的杂乱样本的数量，又提高了效率。\n\n"},{"title":"安装next-cloud","url":"/2018/10/15/Next-cloud/","content":"\n在ubuntu18.04 server 上安装 next-cloud搭建自己的网盘服务，下面介绍使用docker来安装next-cloud和Mariadb容器来实现next-cloud网盘的搭建服务~\n\n<!-- more -->\n\n参考文章： https://lisz.io/tech/nextcloud.html\n\n\n\n## 安装next-cloud\n\n## 一、安装docker\n\n```\napt install docker.io   # 安装docker\ndocker -v               # 验证安装的docker 版本\ndocker images           # 查看docker下面的容器\n# docker rmi id           # 删除docker 容器\n\n```\n\n```\n# 安装 python3 python3-pip\nsudo apt install -y python3 python3-pip\n\n# 安装 docker-compose\nsudo pip3 install docker-compose\n```\n\n\n\n## 二、编写配置文件\n\n```\nmkdir next_cloud && cd next_cloud\nvi docker-compose.yml\n```\n\n```\nversion: '3.3'\n\nservices:\n  db:\n    image: mariadb\n    restart: always\n    volumes:\n      - /home/data/nextcloud/db:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=root\n      - MYSQL_PASSWORD=next_cloud_passwd\n      - MYSQL_DATABASE=next_cloud_db\n      - MYSQL_USER=next_cloud_user\n\n  app:  \n    image: nextcloud\n    restart: always\n    ports:\n      - 80:80\n    links:\n      - db\n    volumes:\n      - /home/data/nextcloud/www:/var/www/html\n```\n\n```\n# 启动容器\nsudo docker-compose up -d\n\n# 更新nextcloud\nsudo docker pull nextcloud\nsudo docker-compose down && sudo docker-compose up -d\n```\n\n\n\n## 三、初始化配置\n\n自行设置管理员用户名和密码，数据目录默认即可，数据库信息填写如 docker-composer.yml 中所示，数据库主机名填 db （配置文件中的数据库应用名）。\n\n\n\n## 四、docker mariadb的使用\n\nnext-cloud的用户信息存储在mariadb的数据库中，在web端无法进行的修改数据库的操作，可以通过手动修改数据库的方式完成。\n\n```\ndocker ps -a    # 查看Mariadb的容器id\ndocker exec -it 46827 bash  # 进入容器，46827是数据库容器id的前几个数字\nmysql -u user_name -p    # 进入mariadb数据库\nshow databases     #查看当前数据库\nuse db_name\nshow tables        # 查看当前数据库下拥有的表\nselect * from users # 查看user表的内容\ndelete from users where username='Bob' # 删除名为Bob的用户\n```\n\n","categories":["linux"]},{"title":"ENVI 图像文件的标准格式","url":"/2018/07/26/ENVI-file-format/","content":"\n\n\n# ENVI 图像文件的标准格式\n\nGIS专业人员，遥感科学家和图像分析师使用ENVI图像分析软件从图像中提取有意义的信息，以做出更好的决策。\n\n<!-- more -->\n\n## ENVI 图像\n\n官方文档地址：\n\n[ENVI Image Files]: https://www.harrisgeospatial.com/docs/enviimagefiles.html\n\n![官网截图](/home/liu/Pictures/Screenshots/envi-images-files.png)\n\n\nENVI图像格式是一个平面二进制光栅文件，带有一个ASCII [头文件](https://www.harrisgeospatial.com/docs/enviheaderfiles.html)。数据以下列格式之一存储为二进制字节流，通常称为*交错类型*（*interleave type*）：\n\n- **频带顺序（**Band Sequential:**）：** BSQ格式是最简单的格式，其中每行数据紧跟在相同频谱带中的下一行。该格式对于单个光谱带的任何部分的空间（x，y）访问是最佳的。\n- **逐个像素交错（**Band-interleaved-by-pixel**）：** BIP格式按顺序存储所有波段的第一个像素，然后是所有波段的第二个像素，接着是所有波段的第三个像素，依此类推，交错到像素数。该格式为图像数据的频谱（z）访问提供了最佳性能。\n- **频带交错（**Band-interleaved-by-line**）：** BIL格式存储第一频带的第一行，然后是第二频带的第一行，接着是第三频带的第一行，交织到频带的数量。每个频带的后续行以类似的方式交错。这种格式在空间和频谱处理之间提供了性能折衷，是大多数ENVI处理任务的推荐文件格式。\n\nENVI栅格格式不支持64位整数（有符号或无符号）数据类型。\n\n\n\n## ENVI 头文件\n\n官方文档地址：\n\n[ENVI 头文件]: https://www.harrisgeospatial.com/docs/ENVIHeaderFiles.html\n\nENVI头文件包含[ENVI格式图像的](https://www.harrisgeospatial.com/docs/enviimagefiles.html)元数据。每当您将图像保存为ENVI栅格格式时，ENVI都会创建一个新的头文件。头文件使用与图像文件相同的名称，文件扩展名为.hdr。\n\n使用[元数据查看器](https://www.harrisgeospatial.com/docs/viewfilemetadata.html)查看ENVI格式图像和其他支持的数据类型的元数据。使用“ [编辑栅格元数据”](https://www.harrisgeospatial.com/docs/editrastermetadata.html)对话框编辑ENVI格式图像的元数据字段。\n\n\n\n| 字段             | 描述                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| 时间             | 符合[ISO-8601](http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=40874)标准的数据采集时间字符串。该字符串可以采用以下任何格式：`YYYY-MM-DD``YYYY-MM-DDTHH：MM：SS.DZ``YYYY-MM-DDTHH：MM：SS：DOOO：毫米`哪里：YYYY是四位数的年份MM是两位数的月份DD是两位数的日子T分隔日期和时间HH是两位数的小时MM是两位数的分钟SS是两位数秒D是秒的小数部分，最高为双精度Z表示时间是坐标世界时（UTC）ooo是UTC时间的两位数偏移量。如果偏移为负，则在值前面加一个减号（ - ）。mm是UTC时间的可选部分小时偏移量（以分钟为单位）。 |\n| 波段名称         | 图像带的名称。                                               |\n| 波段数(必要)     | 每个图像文件的波段数。                                       |\n| 桶               | 列出图像中每个波段的[坏带](https://www.harrisgeospatial.com/docs/enteroptionalheaderinformation.html#Select)乘数值，对于坏带通常为0，对于好带通常为1。 |\n| 字节顺序(必要)   | 整数，长整数，64位整数，无符号64位整数，浮点，双精度和复杂数据类型的字节顺序。使用以下之一：字节顺序= 0（标题信息对话框中的**主机（英特尔）**）是最低有效字节优先（LSF）数据（DEC和MS-DOS系统）。字节顺序= 1（标题信息对话框中的**网络（IEEE）**）是最重要的字节优先（MSF）数据（所有其他平台）。 |\n| 类查找           | 使用[分类文件的](https://www.harrisgeospatial.com/docs/enviclassificationfiles.html) RGB颜色定义列出类颜色。例如，黑色是0,0,0。 |\n| 班级名称         | 列出[分类文件的](https://www.harrisgeospatial.com/docs/enviclassificationfiles.html)类名。 |\n| 类               | 定义[分类文件](https://www.harrisgeospatial.com/docs/enviclassificationfiles.html)的类数，包括未分类的区域。 |\n| 云盖             | 栅格中云量的百分比。                                         |\n| 复杂的功能       | 指定要从复杂图像计算的值，以及在显示图像，计算图像的统计信息或将图像写入新文件时使用的值。值包括Real，Imaginary，Power，Magnitude和Phase。默认值为Power。 |\n| 坐标系字符串     | 将地理参考文件保存为[ENVI栅格格式时](https://www.harrisgeospatial.com/docs/enviimagefiles.html)，ENVI会将一个坐标系字符串字段添加到头文件中。它列出了用于[地理坐标系](https://www.harrisgeospatial.com/docs/backgroundcoordinatesystems.html#Geograph)或[投影坐标系的参数](https://www.harrisgeospatial.com/docs/backgroundcoordinatesystems.html#Projecte)。以下是一些例子：一个**地理坐标系统**（例如，地理纬度/经度）字符串包含单词GEOGCS并列出坐标系名称，基准面，椭球体，本初子午线和单位：`坐标系字符串= ``GEOGCS [ “GCS_WGS_1984”，``DATUM [ “D_WGS_1984”，``SPHEROID [ “WGS_1984” ，6378137.0，298.257223563 ]]``PRIMEM [ “格林威治”，0.0 ]，``单位[ “学位”，0.0174532925199433 ]]`一个**投影坐标系**字符串包含单词PROJCS并列出了所有的地理坐标系统参数，以及详细参数描述的投影坐标系：`坐标系字符串= ``PROJCS [ “WGS_1984_South_Georgia_Lambert”，``GEOGCS [ “GCS_WGS_1984”，``DATUM [ “D_WGS_1984”，``SPHEROID [ “WGS_1984” ，6378137.0，298.257223563 ]]``PRIMEM [ “格林威治”，0.0 ]，``UNIT [ “Degree”，0.0174532925199433 ]]，``PROJECTION [ “Lambert_Conformal_Conic” ]，``PARAMETER [ “False_Easting”，0.0 ]，``PARAMETER [ “False_Northing”，0.0 ]，``PARAMETER [ “Central_Meridian”， - 37.0 ]，``PARAMETER [ “Standard_Parallel_1”， - 54.0 ]，``PARAMETER [ “Standard_Parallel_2”， - 54.75 ]，``PARAMETER [ “Latitude_Of_Origin”， - 55.0 ]，``UNIT [ “Meter”，1.0 ]]`有关更多信息，请参阅[坐标系统字符串](https://www.harrisgeospatial.com/docs/backgroundcoordinatesystems.html#Coordina)。 |\n| 数据增益值       | 获得每个波段的值。单位为W /（m 2 *μm* sr）。                 |\n| 数据忽略值       | 在图像处理中应忽略的像素值。                                 |\n| 数据偏移值       | 每个波段的偏移值。                                           |\n| 数据反射增益值   | 一系列反射增益值。使用Landsat-8文件时，反射增益已按太阳高程的正弦缩放，如下所示：`数据反射增益值= REFLECTANCE_MULT_BAND_1 / sin（太阳高程）` |\n| 数据反射偏移值   | 反射偏移值的数组。使用Landsat-8文件时，反射偏移量已通过太阳高程的正弦缩放，如下所示：`数据反射偏移值= REFLECTANCE_ADD_BAND_1 / sin（太阳高程）` |\n| 数据类型(必要)   | 数据表示的类型：1 =字节：8位无符号整数2 =整数：16位有符号整数3 =长：32位有符号整数4 =浮点：32位单精度5 =双精度：64位双精度浮点数6 =复杂：实数虚构的单精度浮点对9 =双精度复数：实对偶双精度浮点数12 =无符号整数：16位13 =无符号长整数：32位14 = 64位长整数（带符号）15 = 64位无符号长整数（无符号） |\n| 默认波段         | 指示每次打开文件时自动加载到Data Manager **Greyscale**或**R**，**G**和**B**字段的波段号。默认情况下，当打开在其标题中定义了默认波段的文件时，将自动加载新图像。如果仅使用一个波段号，则ENVI加载灰度图像。 |\n| 默认拉伸         | ENVI显示图像时使用的[拉伸](https://www.harrisgeospatial.com/docs/displaytools.html#StretchTypes)类型。选择如下：双极均衡：您可以选择输入要在拉伸中使用的最小和最大像素值。对于多波段图像，这些值将适用于所有波段。您无法为每个波段设置单独的最小/最大值。这是一个例子：均衡0 200。高斯：可选择输入要使用的标准差; 例如：0.3高斯。您可以选择输入要在拉伸中使用的最小和最大像素值。对于多波段图像，这些值将适用于所有波段。您无法为每个波段设置单独的最小/最大值。这是一个例子：0.3高斯0 1000。linear：可选择指定要剪辑的数据的百分比; 例如：5.0线性。或者，输入要在拉伸中使用的最小和最大像素值; 例如：0 200线性。logarithmic：您可以选择输入要在拉伸中使用的最小和最大像素值。对于多波段图像，这些值将适用于所有波段。您无法为每个波段设置单独的最小/最大值。这是一个例子：logarithmic 0 1000。优化线性平方根：可选择输入要使用的平方根因子; 例如：0.5平方根。您可以选择输入要在拉伸中使用的最小和最大像素值。对于多波段图像，这些值将适用于所有波段。您无法为每个波段设置单独的最小/最大值。这是一个例子：0.5平方根0 200。 |\n| dem波段          | [与图像相关联](https://www.harrisgeospatial.com/docs/enteroptionalheaderinformation.html#Associat)的所选[DEM频带的](https://www.harrisgeospatial.com/docs/enteroptionalheaderinformation.html#Associat)索引（从1开始）。在DEM频带如果DEM文件包含一个单一条带，或者如果被选择的图像的第一频带不被写入。在这些情况下，dem band值默认为0。 |\n| dem文件          | [与图像关联](https://www.harrisgeospatial.com/docs/enteroptionalheaderinformation.html#Associat)的[DEM的](https://www.harrisgeospatial.com/docs/enteroptionalheaderinformation.html#Associat)路径和文件名。 |\n| 描述             | 描述图像或执行处理的字符串。                                 |\n| 文件类型(必要)   | ENVI定义的文件类型，例如某种数据格式和处理结果。filetype.txt文件中列出了可用的文件类型（请参阅[文件类型文件](https://www.harrisgeospatial.com/docs/envifiletypefile.html)）。文件类型ASCII字符串必须与filetype.txt文件中的条目完全匹配，包括正确的大小写。 |\n| FWHM             | 列出图像中每个波段的全宽半最大值（FWHM）。单位应与用于波长的单位相同，并在波长单位参数中设置。 |\n| 地理点           | [非地理参考文件的地理角](https://www.harrisgeospatial.com/docs/enteroptionalheaderinformation.html#Geograph)。输入一到四个位置。每个位置必须按以下顺序包含以下项目：*pixel_x_coordinate*，*pixel_y_coordinate*，*纬度*，*经度*例如：`geo points = {``1.0000，1.0000，32.89380137 - 117.07201460，``1002.0000，1.0000，32.87364744 - 116.95855862，``1.0000，1002.0000，32.80628336 - 117.09960891，``1002.0000，1002.0000，32.78615422 - 116.98625969 }`像素坐标[1,1]对应于图像的左上角。 |\n| 标头偏移量(必要) | 文件中存在的嵌入标题信息的字节数。ENVI在读取文件时跳过这些字节。有关详细信息，请参阅[行偏移](https://www.harrisgeospatial.com/docs/enteroptionalheaderinformation.html#Set3)。默认值为0字节。 |\n| 交错(必要)       | 指[数据交错](https://www.harrisgeospatial.com/docs/enviimagefiles.html)是BSQ，BIL还是BIP。 |\n| 线(必要)         | 每个波段的每个图像的行数。                                   |\n| 地图信息         | 按以下顺序列出地理信息：投影名称参考（连接点）像素**x**位置（在文件坐标中）参考（连接点）像素**y**位置（在文件坐标中）像素东移像素北上x像素大小y像素大小投影区（仅限UTM）北或南（仅限UTM）基准单位有关详细[信息，](https://www.harrisgeospatial.com/docs/enteroptionalheaderinformation.html#Enter2)请参阅[输入地理配准文件的地图信息](https://www.harrisgeospatial.com/docs/enteroptionalheaderinformation.html#Enter2)。 |\n| 像素大小         | 表示非地理参考文件的x和y像素大小（以米为单位）。             |\n| 投影信息         | 如果您在ENVI Classic中定义了自定义投影，则此字段包含该地图信息。甲投影信息线在图像使用一个用户定义的投影，而不是在文件中定义的标准投影被添加到ENVI头文件map_proj.txt的ENVI分布的文件。如果头文件包含坐标系字符串字段，则忽略任何现有投影信息行信息。 |\n| 阅读程序         | 定义[自定义文件读取器的](https://www.harrisgeospatial.com/docs/customfilereaders.html)空间和光谱读取例程。 |\n| 反射比例因子     | 当划分为数据时，该值将从0-1反射率缩放。例如，如果数据中的值10,000表示反射率值为1.0，则输入反射率比例因子10,000。 |\n| rpc信息          | 列出具有RPC参考信息而不是标准地图投影的文件的[有理多项式系数（RPC）](https://www.harrisgeospatial.com/docs/backgroundnonstandardprojections.html#Sensor)地理定位信息。 |\n| 样本(必要)       | 每个带的每个图像行的样本数（像素）。                         |\n| 安全标签         | 具有安全信息的字符串，该信息继承自通常包含安全分类级别（例如NITF）的格式。 |\n| 传感器类型       | 仪器类型，例如Landsat TM，SPOT，RADARSAT等。可用的传感器类型列在[ENVI传感器](https://www.harrisgeospatial.com/docs/envisensorfile.html)文件中描述的sensor.txt文件中。该字符串必须与sensor.txt文件中的条目完全匹配，包括正确的大小写。 |\n| 太阳辐照度       | 每个频段的大气顶部太阳辐照度。单位为W /（m 2 *μm）。         |\n| 光谱名称         | 以逗号分隔的光谱名称列表，用{花括号}括起来; 仅用于光谱库文件。 |\n| 太阳方位角       | 从正北方向顺时针方向的太阳角度（以度为单位）。               |\n| 太阳升起         | 地平线上方的太阳角度（以度为单位）。                         |\n| 波长             | 列出图像中每个波段的中心波长值。单位应与用于fwhm字段的单位相同，并在波长单位参数中设置。 |\n| 波长单位         | 表示波长单位的文本字符串。ENVI接受以下字符串：`千分尺``UM``纳米``纳米``毫米``毫米``公分``厘米``米``米``波数``埃``千兆赫``兆赫``指数``未知` |\n| x开始 开始吧     | 定义图像中左上角像素的图像坐标。作为较大图像的空间子集的图像通常使用引用父（或更大）图像的图像坐标系，以便您可以链接并动态地覆盖两个图像。左上角像素的默认值为（0,0）。地图信息标题字段中的参考（连接点）像素是从一开始的。更改这些值不会影响ENVI从文件中读取图像数据的方式。 |\n| z平均值          | Z曲线的x和y方向的像素数平均值。                              |\n| z绘图范围        | Z图的默认最小值和最大值。                                    |\n| z情节标题        | Z图的x和y轴标题。                                            |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["遥感"]},{"title":"Ubuntu18.04下字体大小问题","url":"/2018/07/26/ubuntu下字体大小问题/","content":"\n在自己笔记本上安装了ubuntu18.04，奈何Ubuntu18.04对高分屏支持不好，字体偏小，gnome桌面可以使用tweak工具设置字体大小，还可以设置屏幕缩放，但是一些软件会因此显示不佳，这里记录下一些软件屏幕字体太小的调整问题。\n\n<!-- more -->\n\n\n\n## 一、快捷键——最实用 \n\n使用 ctrl  += 组合键放大 或者使用 ctrl+shift+=三个键\n\n使用 ctrl  - 组合键缩小\n\n对大部分软件都可尝试该方法，亲测 Chrome、VScode、SublimeText3等诸多软件都能使用\n\n\n\n## 二、设置 \n\n在软件的设置中寻找缩放选项，调节屏幕至自己舒适的程度","categories":["linux"]},{"title":"DOSBox的安装和使用","url":"/2018/07/26/DOSBox的安装使用/","content":"\n由于当今操作系统大多为64位系统，在win7及以上系统默认不再提供 debug.exe 程序，因此我们需要在DOSBox模拟程序下进行汇编程序开发。\n\n<!-- more -->\n\n## 安装DOSBox程序\n\n去下面的网址下载与自己操作系统对应的 DOSBox 程序\n\n> https://www.dosbox.com/download.php?main=1\n\n默认安装即可\n\n\n\n## 配置操作目录\n\n**1、新建工作目录，这里在 D盘创建wkdir目录作为操作目录，路径如下**\n\n> D:\\wkdir\n\n* 注意路径中不要出现中文，必须全英文，否则会乱码。\n\n将下面四个文件copy到该目录\n\n* debug.exe\n* edit.exe\n* LINK.exe\n* MASM.exe\n\n\n\n**2、打开DOSBox的安装目录，配置操作目录**\n\n具体操作如下：\n\n选中桌面图标，右键打开文件所在目录。\n\n双击  DOSBox 0.74 Options.bat 批处理文件，会打开DOSBox的配置文件进行编辑，将最后修改成下面几行的样子。\n\n```\n[autoexec]\nLines in this section will be run at startup.\nYou can put your MOUNT lines here.\nMOUNT C D:\\wkdir\nset PATH=$PATH$;D:\\wkdir\n```\n\n\n\n## 安装notepad++编辑器\n\n从notepad++ 官网下载 32bit 的安装程序，默认安装即可，作为我们后面的代码编辑器。","categories":["汇编语言"]},{"title":"Ubuntu18.04 server设置定时重启","url":"/2018/07/26/ubuntu服务器设置定时重启/","content":"\n使用Ubuntu18.04 server过程中，希望配置服务器定时重启达到释放内存，加速性能的目的。 \n\n<!-- more -->\n\n# 配置定时重启任务\n\n在ubuntu下，可以通过编辑 cron 服务的配置文件来配置定时任务，在此添加定时重启任务。\n\n```\ncrontab -e # 打开配置文件进行编辑\n0 3 * * * /sbin/reboot # 配置服务器每天凌晨四点重启\n```\n\n参数说明：\n\n* 一共五个数值，第一个是分钟，第二个是小时，第三个是日期，第四个是月份，第五个是星期(0-6)\n\n","categories":["linux"]},{"title":"python3进阶之selenium","url":"/2018/07/26/python3进阶之selenium/","content":"\n使用Python操纵Firefox or Chrome浏览器~\n\n系统环境： Ubuntu18.04   windows系统请绕道～\n\n<!-- more -->\n\n用python操纵浏览器访问网页，登陆网站～\n\n## 环境配置\n\n1、安装selenium\n\n为了不污染原有python环境，我喜欢利用anconda创建虚拟python环境，也可直接在本机python环境下操作。\n\n```\nconda create -n pyplay python=3.6  #创建虚拟环境\nconda activate pyplay   #激活虚拟环境\nconda deactivate        #退出虚拟环境\n\npip install --upgrade pip #升级pip\npip -V\t\t\t\t\t #查看当前pip版本\npip install selenium    #安装python模块\n```\n\n2、获取 Firfox浏览器驱动**geckodriver**\n\n在这里使用Firfox浏览器，点击下面的链接，进入github下载与自己系统相应的驱动文件。也可使用Chrome浏览器，只需下载对应驱动即可\n\n[Firfox驱动**geckodriver**](https://github.com/mozilla/geckodriver/releases)\n\n3、将下载好的驱动文件解压，记下解压后文件所在目录，这里将geckodriver放在  /home/user/Apps/下\n\n\n\n## 开始体验 selenium\n\n配置好环境后，我们进入虚拟环境中python shell中，在命令行运行一下，访问百度 www.baidu.com\n\n```\nfrom selenium import webdriver\nbrowser = webdriver.Firefox(executable_path ='/home/user/Apps/geckodriver')  #此时可以看到firefox浏览器已经启动\nbrowser.get('www.baidu.com')  #访问百度\n```\n\n\n\n","categories":["趣玩python"]},{"title":"numpy and pandas","url":"/2018/07/26/numpy_and_pandas/","content":"\ngoogle 机器学习速成教程笔记-pandas\n\n<!-- more -->\n\n# numpy and pandas\n\n## numpy\n\n> python中默认从0开始计数\n>\n> 需要针对行进行计算，需指定 axis=0, 针对列则需指定 axis=1，这一点需注意的是 sum函数\n>\n> 索引类似C语言中的数组，使用 []\n\n\n\n```python\n# -*- coding:utf-8 -*-\nimport numpy as np\n\narray = np.array([\n    [1,2,3],\n    [4,7,4] \n])          \t#得到一个矩阵\n\narray.size      #输出矩阵元素个数\narray.dim\t\t#查看矩阵的维度\narray.shape\t\t#查看矩阵的形状，比如 m×n\n\n# numpy创建各种array\na = np.array([2,45,3],dtype=np.int) \n# 创建一维矩阵，dtype制定类型 int16 int32 int64 float16 float16 ...\nb = np.array([  \n    [1,2,3],\n    [4,5,6]\n])   #创建二维矩阵\na = np.zeros((4,5)) #创建4*5的零矩阵\nd = np.ones((4,5))  #创建4*5的1矩阵\nnp.arange(2,14) #产生2-13的矩阵，arange函数不得到尾数\ne = np.arange(12).reshape((3,4))  \n#从0开始，产生12个有序数列,再调用reshape方法得到3*4的矩阵\nf = np.linspace(1,10,20) #将1-10等分为20\n\n#矩阵运算\na**2 #平方\nnp.sin(a) #求sin值\na<3 \na==3\n#返回布尔值 True or False\na*b      #元素相乘\nnp.dot(a,b) #矩阵乘法\n\nnp.random.random() #生成随机矩阵\nnp.sum(a)   #对所有元素求和\nnp.sum(a,axis=0) #指定求行和还是列和，axis=0求列和，axis=1求行和，以下同理\nnp.min(a)\nnp.max(a)\nnp.mean(a)   #计算矩阵的均值\nnp.median(a) #中位数\nnp.cumsum(a) #返回累加值\nnp.diff(a)   #求相邻数的差，作为导数\n\nnp.argmin(a)  #返回最小值的索引\nnp.argmax(a)  #返回最大值的索引\n\nnp.clip(a,a_min,a_max) \n# a中小于a_min的数全取a_min,大于a_max的数全取 a_max，其他数不变\n\na[1,1]\na[1][1] #两种表示方式相同\na[1,2:3] #矩阵的索引与matlab相同\n\nfor raw in a:\n    print(raw)    #默认对行迭代\n\na.T #矩阵转置\na.flatten() #将矩阵转为行\n\na = np.arange(1,9).reshape((2,4))\nb = a + 2;\nc = np.vstack((a,b)) # 行拼接： 列数不变，行数增加\nd = np.hstack((a,b)) # 列拼接\ng = np.concatenate((a,b,c,d),axis=0) #矩阵合并，通过axis指定行还是列合并\n\ne = np.array([1,1,1])\nf = e[:,np.newaxis]  #行矩阵变列矩阵\n#行矩阵不能直接通过 e.T转置操作变为列矩阵，因为列矩阵为2维的，行矩阵只为一维的\n\nnp.split(a,2,axis=0) #将矩阵a按列分为两部分\nnp.vsplit(a,3)  #行分割\nnp.hsplit(a,4)\n\nb = a\nc = b\nd = c  #如果改变了a，则其余变量全会改变\nb = a.copy() #则将a的值copy过去，b与a未关联\n```\n\n\n\n## Pandas\n\n\n\n```\n# -*- coding:utf-8 -*-\n\nimport pandas as pd\nimport numpy as np\n\ns = pd.Series([1,4,5,np,nan,33,44])\ndates = pd.date_range('20160101',periods=7)\ndf = pd.DataFrame(np.random.randn(7,4),index=dates,columns=['a','b','c','d'])\n\n\n```\n\n","categories":["Machine Learning"]},{"title":"python3进阶之print打印和输出","url":"/2018/07/26/python3进阶之print/","content":"\n在python中，print可以打印所有的数据类型，包括自定义数据。python2中，print只是一条语句，而在python3中，print是一条内置函数，这便使得print的功能更为强大。\n\n<!-- more -->\n\n## 一、查看print参数\n\n```\nhelp(print)\n```\n\n* value: 打印的值，可多个\n* file: 输出流，默认为 sys.stdout系统标准输出，打印到屏幕\n* sep: 多个值之间的分隔符\n* end: 结束符，默认为换行符\n* flush: 是否强制刷新到输出流，默认为否\n\n\n\n## 二、打印数据\n\n```python\nprint(102,0.34,'hello',True)  #打印各种数据\nprint([1,4,3,6])              #打印列表\nprint({1,2,3})\t\t\t\t  #打印集合\n\nclass demo():\n    pass\ndemo = demo()\nprint(demo)    #打印对象\n```\n\n\n\n## 三、分隔符\n\n\n\n```python\nprint(1,2,3,sep='-')  #sep为 separate的缩写\n## 输出结果： 1-2-3\n```\n\n\n\n## 四、结束符\n\n```python\nprint(1,2,3,end=' end')\n## 输出结果: 1 2 3 end\n```\n\n\n\n## 五、输出重定向\n\n将print的输出定向到文件中\n\n```python\nwith open('data.log','w') as fileObj:\n\tprint(1,2,3,file=fileObj)   #输出到文件\n```\n\n将print的输出输出到标准错误流中：\n\n```\nimport sys\nprint('Hello world',file=sys.stderr)\n```\n\n","categories":["趣玩python"]},{"title":"linux下的login shell","url":"/2018/07/26/linux下的 login_shell/","content":"\n在Linux下使用 terminal,可能常常会遇到这样的选项：\n\nrun command as a login shell\n\n这是什么意思呢，login 之后的区别又是什么？\n\n<!-- more -->\n\n对此问题原先一直不解，使用搜索引擎搜索后得知了答案。\n\n原来在我们打开 linux终端后，terminal需要读取配置文件，login和 no login的区别是读取的配置文件不同。\n\n* login shell 在启动时读取~/.bash_profile文件，如果该文件不存在，则读取 ~/.profile 文件\n* non-login shell 一般读取的是 ～/.bashrc文件\n\n不同文件内容不同，也拥有不同的配置。\n\n\n\n以下是摘自 askubuntu.com的原文\n\n> Assuming that your shell is Bash (the default in Ubuntu), these are the differences:\n>\n> - When running as a **login** shell, Bash will read `~/.bash_profile` (or, if that doesn't exist, `~/.profile`) on startup. In some cases, this file reads `~/.bashrc` as well.\n> - When running as a **non-login** shell, Bash will read `~/.bashrc`.\n>\n> So, why do you see different behaviors when running as a login/non-login shell? Because your `.bash_profile`/`.profile` is doing different things than your `.bashrc`.","categories":["linux"]},{"title":"linux下的电源管理","url":"/2018/07/26/linux-power-management/","content":"\n在自己笔电上安装了ubutnu18.04，然而使用中发现在ubuntu下，笔记本电脑发热严重，耗电高，续航能力下降，对电池造成严重损耗，在windows下却不存在这个问题。\n\n遂google之，原来是ubuntu下的电源管理没有win下好，在此手动安装linux下著名电源管理软件来改善这一问题。\n\n<!-- more -->\n\n实际使用中，电池满电的情况下，在win10下电脑能够使用4小时，ubuntu下却只能使用2~3小时左右，而且Ubuntu下使用久了电脑发热严重。\n\n下面介绍如何改善这一问题\n\n## 一、安装著名 tlp电源管理\n\n```\nsudo apt install tlp tlp-rdw #安装电源管理软件\nsudo tlp start               # 启动电源管理\nsudo systemctl enable tlp   #配置开机启动\n```\n\n× 值得注意的是，电脑上电源管理软件最好只保留一个，两个以上会造成冲突，反而达不到自己想要的效果。\n\n\n\n## 二、安装系统监控\n\n```\nsudo apt-get install indicator-multiload #安装\n```\n\n安装完成后即可在状态栏点击图标查看当前cpu、硬盘、网速等情况。","categories":["linux"]},{"title":"Ubuntu18.04下设置DNS","url":"/2018/07/26/linux-DNS设置/","content":"\n在Linux下设置自己想要的DNS\n\n<!-- more -->\n\n```\nvi /etc/resolv.conf\n# 修改对应的ip\n```\n\n","categories":["linux"]},{"title":"git 的简单使用","url":"/2018/07/26/git/","content":"\n# git\n\ngit 简单设置和使用\n\n<!-- more -->\n\n## settings\n\n### home\n\n在win10下设置home变量，值为  F:\\AppSettings ,将vscode git等配置文件保存在该目录下\n\n设置git工作目录为 F:\\Docs\\git\n\n### config\n\n设置用户名和邮箱\n\n```\n  git config --global user.email \"you@example.com\"\n  git config --global user.name \"Your Name\"\n```\n\n### network\n\n安装好git后，打开git bash命令行，为了加速git下载和同步的速度，设置git代理\n\n```bash\ngit config --global http.proxy http://127.0.0.1:1080\ngit config --global https.proxy https://127.0.0.1:1080\n```\n\n取消git代理的命令如下：\n\n```\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n### ssh-github\n\n添加ssh指纹到github,打开git bash, 生成ssh指纹\n\n```\nssh-keygen -t rsa #生成RSA密匙，后面按提示配置\ncd ~ #回到用户家目录，生成的密钥在此\ncd ./ssh && ls #进入ssh密钥目录\ncat id_rsa.pub #输出公钥内容\n```\n\n添加到github，打开setting-> ssh-> 添加即可\n\n测试是否成功\n\n```\ngit clone git@github.com:fadelover/study.git   #尝试clone一个远程仓库到本地\n```\n\n## usage\n\n```\ngit init  #将目录初始化为一个git目录\ngit remote add study git@github.com:fadelover/study.git #添加远程仓库，git remote -v 查看远程库列表\ngit add filename.type  #添加文件后要使用该命令提交 git add . 提交所有\ngit commit -m \"comments\"  #提交修改\ngit push -u study master  #将主分支同步到远程study库\n```\n\n### git remote\n\n```\ngit remote -v    #查看当前仓库\ngit remote add repo_name git@github.com:fadelover/study.git  #添加仓库\ngit remote rm repo_name #移除某仓库\n```\n\n### git fetch\n\n```\ngit fetch repo_name #将远程仓库内容下载到本地\n```\n\n","categories":["git"]},{"title":"lingo","url":"/2018/07/26/lingo/","content":"\n# lingo求解优化模型\n\n优化模型中一些通用术语\n\n* programming: 规划\n* optimization: 优化\n* combinatorial optimization: 组合规划\n* integer programming: 整数规划\n\n<!-- more -->\n\n## 优化模型\n\n各种优化模型：\n\n| 简称      | 介绍                                                         |\n| --------- | ------------------------------------------------------------ |\n| LP        | linear programming,线性规划                                  |\n| NLP       | nonlinear programming,非线性规划                             |\n| QP        | quadratic programming,二次规划                               |\n| IP        | integer programming, 整数规划，x的一个或者多个分量只取整数值 |\n| PIP       | pure integer programming,纯整数规划，x的所有分量只取整数值   |\n| MIP       | mixed integer programming, x的部分分量只取帧数数值           |\n| ZOP       | zero-one programming, 0-1规划，x的分量中取整数数值的范围限定为只取0或者1 |\n| ILP和INLP | 整数规划也分为整数线性规划(ILP)和整数非线性规划(INLP)        |\n\n\n\n## lingo的语法：\n\n> lindo和lingo的区别，lindo主要为较早版本的叫法，lingo为较新版本的命名，两者语法基本相同但有差异，lingo兼容lindo语法。\n\n1. 注释： ！开头\n2. lingo中假设所有变量非负，所以无需添加非负约束（如 x>0, y>0）\n\n## lingo结果解读\n\nlingo状态窗口\n\n| 名称                                                         |\n| :----------------------------------------------------------- |\n| Variables:变量                                               |\n| Constraints: 约束变量                                        |\n| Nonzeros: 非零系数约束量                                     |\n| Generator Memory Uesd(K): 内存使用量，单位为千字节           |\n| Elapsed Runtime(hh: mm: ss): 求解花费时间，显示格式为“时：分：秒” |\n\nlingo Solver Status窗口参数解释\n\n|         名称          |                             含义                             |\n| :-------------------: | :----------------------------------------------------------: |\n| Model Class(模型类型) | LP,QP,ILP,IQP,PILP,PIQP,NLP,INLP,PINLP等等（I开头表示IP，PI开头表示) |\n|                       |                                                              |\n|                       |                                                              |\n|     Status(状态)      |     显示当前求解状态，“Global optimal”表示找到全局最优解     |\n|                       |                                                              |\n|                       |                                                              |\n|                       |                                                              |\n|                       |                                                              |\n|                       |                                                              |\n|                       |                                                              |\n|  class(当前模型类型)  |                        LP，QP，ILP等                         |\n\n","categories":["software"]},{"title":"elementary os","url":"/2018/07/26/elementary-os-5/","content":"\n# elementary os 折腾记\n\n2018\\10\\24 今天程序员节，最近自己系统安装了最新版的 elementary os juno 5, 该版本基于 Ubuntu18.04，在ubuntu18.04 的基础上做了深度优化，同时使用了自己开发的桌面环境，相比于 gnome更加美观轻巧，而且无需自己做太多优化，就已经很漂亮了，毕竟号称最美的linux系统。\n\n下面介绍下安装 elementary os后需要做的优化配置\n\n除了安装 wps、搜狗输入法、网易云音乐外，还需自己做一些针对自己所需的优化。\n\n<!-- more -->\n\n参考教程：\n [elementary OS 0.4 Loki安装后的配置](https://www.jianshu.com/p/1e104090ffaa) \n\n**内容包括：**\n\n* 使用国内最快的阿里源\n\n* 安装搜狗输入法\n\n* 安装chrome浏览器\n\n* 安装WPS \n\n* 安装网易云音乐并解决无法启动问题\n\n* 完美解决linux下Tim的使用问题\n\n* 安装 Typora 编辑器\n\n* 安装sublime text3 并解决中文输入问题\n\n* 安装电源管理\n\n* 解决高分屏下字体太小问题\n\n* 安装并配置中文字体\n\n* 美化grub\n\n* 设置开机自动挂载 windows 分区\n\n* docker的简单使用\n\n* PPA源的操作\n\n* 安装 R\n\n\n\n## 开始之前的准备\n在开始之前，首先更新下系统\n```\nsudo apt update -y\nsudo apt upgrade -y\nsudo apt install vim    # 安装完整版Vim\nsudo apt install gdebi # 使用gdebi 安装 deb包，能够自动解决复杂的依赖关系\nsudo apt install software-properties-common # 若未安装，无法使用添加第三方源的命令\n```\n\n## 更换阿里源\n参考链接：\n[Ubuntu18.04下更改apt源为阿里云源](https://blog.csdn.net/zhangjiahao14/article/details/80554616) \n\n首先备份原来的源\n\n```\nsudo mv /etc/apt/sources.list /etc/apt/sources.list.bak\n```\n\n编辑源文件\n```\nsudo vim /etc/apt/sources.list\n```\n清空原文件内容，将下面的内容复制粘贴到文件中\n\n```\ndeb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\n\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\n\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\n\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\n\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\n\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\n\n```\n## 安装搜狗输入法\n首先百度搜索 sogou linux ，进入官网下载好相应版本的 deb包。然后卸载系统自带的ibus输入法和 scim组件，避免和搜狗输入法依赖的 fcitx 输入法框架冲突。然后安装 fcitx 的主要组件，最后安装搜狗输入法。 \n\n```\n sudo apt-get remove ibus   # 卸载ibus\n sudo apt-get remove scim \n sudo apt-get autoremove    #删除依赖包\n sudo apt-get -f install    #修正安装过程中出现的依赖性关系\n \n sudo apt-get install fcitx-bin  # 安装fcitx\n sudo apt-get install fcitx-table\n```\n```\nsudo apt install gdebi    # 安装deb包安装器\nsudo gdebi sogou*.deb\nsudo apt install -f     # 解决依赖关系\nim-config  # 打开输入法配置，设置系统默认输入法为 fcitx\nfcitx-config-gtk3 # 打开fcitx输入法配置，选择搜狗输入法\n\n```\n\n## chrome浏览器\n\n一条命令搞定\n\n```\nsudo gdebi wps-office_10.1.0.5707-a21_amd64.deb\n```\n\n## 安装WPS \n\n一条命令搞定\n\n```\nsudo gdebi wps-office_10.1.0.5707-a21_amd64.deb\n```\n\n## 网易云音乐\n\n- 安装网易云音乐\n\n  首先安装gdebi 软件包安装器，该安装器会自动解决软件的依赖关系，然后从 网易云音乐官网上下载相应的安装包进行安装。\n\n  ```\n  sudo apt install gdebi   # 安装 deb 包安装器\n  sudo gdebi netease-cloud-music_1.1.0_amd64_ubuntu.deb # 使用 gdebi安装会自动解决依赖关系\n  ```\n\n  解决点击网易云音乐图标无法启动问题：（详情请搜索知乎，此解决方案来源于知乎）\n\n  ```\n  cd /usr/share/applications\n  sudo vi netease-cloud-music.desktop   # 修改 Exec行为如下文件所示\n  ```\n\n  ```\n  [Desktop Entry]\n  Version=1.0\n  Type=Application\n  Name=NetEase Cloud Music\n  Name[zh_CN]=网易云音乐\n  Name[zh_TW]=網易雲音樂\n  Comment=NetEase Cloud Music\n  Comment[zh_CN]=网易云音乐\n  Comment[zh_TW]=網易雲音樂\n  Icon=netease-cloud-music\n  Exec=sh -c \"unset SESSION_MANAGER && netease-cloud-music %U\"\n  Categories=AudioVideo;Player;\n  Terminal=false\n  StartupNotify=true\n  StartupWMClass=netease-cloud-music\n  MimeType=audio/aac;audio/flac;audio/mp3;audio/mp4;audio/mpeg;audio/ogg;audio/x-ape;audio/x-flac;audio/x-mp3;audio/x-mpeg;audio/x-ms-wma;audio/x-vorbis;audio/x-vorbis+ogg;audio/x-wav;\n  ```\n\n## 完美解决linux下Tim的使用问题\n\nlinux下使用QQ是众所周知的难题，在此推荐一个个人认为的最佳解决方案，docker-QQ,无需个人复杂配置，而且稳定可靠，能使用完整QQ功能。\n\n参考链接：http://blog.cumtpn.com/Linux/Linux-ubuntu-qq.html\n\n\n\n## 安装Typora编辑器并配置中文\n\n```\n# or run:\n# sudo apt-key adv --keyserver keyserver.ubuntu.com--recv-keys BA300B7755AFCFAE\nwget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -\n# add Typora's repository\nsudo add-apt-repository 'deb https://typora.io/linux ./'\nsudo apt-get update\n# install typora\nsudo apt-get install typora\n```\n\n安装好 Typora 后，因为其默认调用的系统字体很难看，因此我们在此通过修改其css样式来配置我们想要的字体。\n\n打开theme主题，修改css文件，在body标签中的font family，将自己想要的字体放最前，这里选择了放三个字体，以防某个字体失效。\n\n```css\nbody {\n    font-family: \"Microsoft YaHei\",\"YaHei Consolas Hybrid\",\"YaHei Consolas Hybrid YaHei Consolas Hybrid Regular\",\"Open Sans\",\"Clear Sans\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    color: rgb(51, 51, 51);\n    line-height: 1.6;\n}\n```\n\n\n\n## 安装sublime text3 并配置中文输入\n\n原文地址： [sublime中文问题解决](https://github.com/lyfeyaj/sublime-text-imfix) \n\n```\ngit clone https://github.com/lyfeyaj/sublime-text-imfix.git\ncd sublime-text-imfix\n./sublime-imfix\n```\n\n安装完成后，打开 sublime，安装sublime的包管理工具，安装 Boxy theme，安装完成后，配置自己想要的主题。\n\n## 安装电源管理\n\n```\nsudo apt-get install tlp   # 安装tlp电源管理\nsudo tlp start\nsudo systemctl enable tlp  # 设置开机启动\n```\n\n## 解决高分屏下字体太小问题\n\n```\nsudo apt install dconf-editor  # 安装修改系统配置软件\n```\n\n从左上角 Applications中找到 dconf图标并启动，点击软件右上角的搜索框，搜索 text-scaling-factor , 自己设置合适的值，可以看到系统字体变大了，调到自己喜欢的大小,一般设置 1.3左右较为合适。\n\n## 安装中文字体\n\n- 一键安装YaHei Consolas Hybrid字体\n\n```\nwget -qO- https://raw.githubusercontent.com/yakumioto/YaHei-Consolas-Hybrid-1.12/master/install.sh | sudo sh\n```\n\n- 安装文泉驿字体：\n\n```\nsudo apt-get install ttf-wqy-microhei #文泉驿-微米黑 \nsudo apt-get install ttf-wqy-zenhei  #文泉驿-正黑\nsudo apt-get install xfonts-wqy #文泉驿-点阵宋体\n```\n\n* 设置中文字体:\n\n  这里通过安装elementary-tweaks工具来设置中文字体\n\n  ```\n  # 1、更新软件源\n  sudo apt update\n  \n  # 2、安装add-apt-repository命令所在的软件包\n  sudo apt install software-properties-common\n  \n  # 3、使用add-apt-repository命令添加ppa\n  sudo add-apt-repository ppa:philip.scott/elementary-tweaks\n  \n  # 4、再次更新软件源\n  sudo apt update\n  \n  # 5、安装elementary-tweaks\n  sudo apt install elementary-tweaks\n  ```\n\n安装好 tweak后，进入系统设置，找到 tweak后设置 YaHei Consolas Hybrid 字体。\n\n## 美化grub\n\n这里我们通过安装 grub-customizer 这一软件来实现编辑 grub 启动项条目和配置grub主题。\n\n```\nsudo add-apt-repository ppa:danielrichter2007/grub-customizer\nsudo apt-get update\nsudo apt-get install grub-customizer\n```\n\n## 设置开机自动挂载 windows 分区\n\n因为自己电脑是 windows 和 linux 双系统，需要两个系统协同工作，而windows 下无法读取 linux 文件系统，而 linux 系统可以使用 windows 系统下的分区，因此在linux 下设置自动挂载一个 windows 分区，实现两系统文件共享。\n\n```\nsudo fdisk -l  # 查看系统磁盘号\nsudo blkid     # 获取分区的 uuid 号\nsudo vi /etc/fstab # 打开配置文件\n```\n\n在最后加入下面一行，分别为分区识别号，挂载目录，文件系统类型，后面的 defaults 0 0 无需修改\n\n```\nUUID=46CA5A93CA5A7F5D /media/liu/docs/ ntfs defaults 0 0\n```\n\n\n\n## PPA源的操作\n\n**1、添加 PPA 源** \n　　添加 PPA 源的命令为：sudo add-apt-repository ppa:user/ppa-name \n　　添加好记得要更新一下： sudo apt-get update\n\n**2、删除 PPA 源** \n　　删除 PPA 源的命令格式则为：sudo add-apt-repository -r ppa:user/ppa-name \n　　然后进入 /etc/apt/sources.list.d 目录，将相应 ppa 源的保存文件删除。 \n　　最后同样更新一下：sudo apt-get update\n\n## docker的简单使用\n\n### 安装docker\n\n这里直接使用系统包管理器安装docker，也可选择按照官网教程手动编译docker\n\n```\nsudo apt install docker.io\n```\n\n将当前用户加入docker组：\n\n```\nsudo gpasswd -a ${USER} docker\nsystemctl restart docker\n```\n\n然后注销本次登录方能生效\n\n### 使用阿里云docker加速器\n\n国内访问docker网站，拉取镜像的速度很慢，这里使用阿里云的加速器加速。\n\n**1. 安装／升级Docker客户端**\n推荐安装1.10.0以上版本的Docker客户端，参考文档 docker-ce\n\n**2. 配置镜像加速器**\n针对Docker客户端版本大于 1.10.0 的用户\n\n您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\n\n\tsudo mkdir -p /etc/docker\n\tsudo tee /etc/docker/daemon.json <<-'EOF'\n\t{\n\t  \"registry-mirrors\": [\"https://xbagkcb9.mirror.aliyuncs.com\"]\n\t}\n\tEOF\n\tsudo systemctl daemon-reload\n\tsudo systemctl restart docker\n### docker 的简单使用\n\n\tdocker ps # 查看当前运行的容器\n\t# docker容器操作\n\tdocker container ls -a # 查看所有容器\n\tdocker container prune # 删除所有处于终止状态的容器\n\tdocker container rm container_name # 删除某容器\n\tdocker container stop cd7565   # 停止容器\n\t# docker images 操作\n\tdocker images # 查看当前所有镜像\n\tdocker rmi  im_id      # 删除某镜像 \n## 安装R\n\n这里使用 docker 安装R，同时配置Rstudio server来通过浏览器访问。使用docker的方式可以避免污染本机环境，在不需要时只需删除对应的容器和镜像即可。\n\n参考链接： [Installing R Packages](https://ropenscilabs.github.io/r-docker-tutorial/03-install-packages.html) \n\n下面的命令会在当前系统安装 docker rstudio镜像，如果已安装，则会启动该环境，若未安装，则会从服务器拉取该镜像到本地\n\n- password 选项是设置 rstudio server 的浏览器登录密码。默认用户为 rstudio ,登录密码为下面所设置的。\n\n```\ndocker run -e PASSWORD=rstudio2018 --rm -p 8787:8787 -v /home/liu/Documents/code/r:/home/rstudio rocker/verse\n```\n\n注意冒号前的目录最好使用普通用户创建，如果该目录为 root 用户所有，则在后续步骤会报错。若本机只有root用户，可新建一普通用户。\n\n假如你已经按上一节中提到的那样安装好了docker中的 R 容器，可以通过浏览器访问 http://127.0.0.1:8787 来进入Rstudio的图形界面。\n\n```\n# install R packages\ninstall.packages('gapminder')\n# load library\nlibrary(gapminder)\n```\n\n查看 docker中容器的哈希值\n\n```\ndocker ps\n```\n\n保存最新版本镜像\n\n```\ndocker commit -m \"verse + gapminder\" 4a6a528b35da verse_gapminder\n```\n\n查看所有镜像\n\n```\ndocker images\n```\n\n","categories":["linux"]},{"title":"TensorFlow 使用","url":"/2018/07/26/Machine-Learning-2-TF/","content":"\ngoogle 机器学习速成教程笔记2\n\n<!-- more -->\n\n# TF使用的基本步骤\n\n首先配置vscode使用anconda的tf虚拟环境，工作区设置添加下面的代码\n\n```json\n{\n    \"python.pythonPath\":\"G:/Apps/Dev/Anaconda3/envs/tensorflow/python.exe\",\n    \"terminal.integrated.shell.windows\": \"G:\\\\Apps\\\\Dev\\\\Git\\\\bin\\\\bash.exe\" \n}\n```\n\n\n\nTensorflow工具包的层次结构：\n\n![](F:\\Docs\\git\\study\\md\\ML\\media\\tf1.png)\n\n使用 tf.estimator API实现线性回归程序：\n\n```\n\n```\n\n### 超参数\n\n下面列出一些机器学习中常用的超参数：\n\n* **steps:** 是指训练迭代的总次数，一步计算一批样本的损失，然后使用该值修改模型的权重一次\n* **batch size:** 单步的样本数量（随机选择）。\n\n$$\ntotal\\,number\\,of\\,trained\\,examples = batch\\,size * steps\n$$\n\n* **periods:** 控制报告的粒度。periods的值代表了输出报告的次数。比如学习200次，设置periods=10,则每学习20次输出一次报告\n\n$$\nnumber\\,of\\,training\\,examples\\,in\\,each\\,period = \\frac{batch\\,size * steps} {periods}\n$$\n\n","categories":["ML"]},{"title":"Machine Learning-3","url":"/2018/07/26/Machine-Learning-4/","content":"\n机器学习中对数据的表示\n\n<!-- more -->\n\n机器学习摸底根据浮点值进行训练，因此整数和浮点数的原始数据不需要特殊编码。而字符型等其他数据则需要编码进行表示。\n\n## 映射原始数据\n\n### 字符串的映射\n\n* 为待表示的字符串定义一词汇表\n* 为该词汇表创建一独热编码\n  * 只有一个元素设为1\n  * 其他元素设为0\n\n\n\n### 映射分类值\n\n分类特征可能具有一系列离散值，如：\n\n```\n {'Netherlands', 'Belgium', 'Luxembourg'}\n```\n\n可将分类特征编码为枚举类型或表示不同值的整数离散集。例如：\n\n* 'Netherlands' 表示为0\n* 'Belgium' 表示为 1\n* 'Luxembourg' 表示为 2\n\n","categories":["ML"]},{"title":"Machine Learning-3","url":"/2018/07/26/Machine-Learning-3/","content":"\n# 机器学习之泛化\n\n**泛化能力：** 是指机器学习模型对新数据的适应能力。\n\n监督式机器学习基于几条重要假设，若违背了这几条重要假设，模型将不具备普适性-也就是不具备泛化能力，不能很好的运用到训练数据集之外的数据。\n\n<!-- more -->\n\n## 机器学习三条基本假设\n\n* 从分布中随机抽取独立同分布（i,i,d)的样本。换言之，样本之间不会相互影响。\n* 分布是平稳的；即分布在数据集中不会发生变化。\n* 从同一分布的数据划分中抽取样本。\n\n> 如果不符合监督式机器学习的关键假设，那么模型将失去具备泛化能力的理论保证。\n\n> 如果某个模型尝试紧密拟合训练数据，却不能够很好的泛化到新数据，就会发生过拟合现象。\n\n\n\n### 过拟合\n\n机器学习的目标是对从真实概率分布（已隐藏）中抽取的新数据做出良好预测。模型需要适当拟合当前数据，但也要尽可能简单的拟合数据。\n\n模型的如果过于复杂，即使在训练过程中产生的损失很低，但在预测新数据方面可能表现糟糕。\n\n为了评估模型的拟合情况，是否发生过拟合现象，采用奥卡姆剃刀定律：\n\n> 机器学习模型越简单，良好的实证结果就越有可能不仅仅基于样本的特性。\n\n考虑以下两点因素：\n\n* 模型的复杂程度\n* 模型在处理训练数据方面的表现\n\n\n\n机器学习模型旨在根据以前未见过的新数据做出良好预测。上面的讨论给处理理论评估方法，而机器学习侧重于实证评估来评判模型泛化到新数据的能力。采用分割数据集为两个子集的方法来评估：\n\n* **训练集**-用于训练模型的子集，越大模型越准确\n  * \n* **测试集**-用于测试模型的子集，越大置信区间越好\n  * 规模足够大，可产生具有统计意义的结果\n  * 能代表整个数据集。换言之，测试集特征和训练集的特征相同。\n\n> **绝对不要对测试集进行训练：** 如果在测试集上表现过于良好，因检查是否存在此问题，尤其是数据集中存在大量冗余数据的情况下，很容易犯错。因此预处理数据时应该先去除冗余数据。\n\n采用模型在测试集上的表现来衡量模型的泛化能力。\n\n\n\n### 验证\n\n一般的方法将数据划分为两个子集，一个子集用于训练，一个子集用于测试。根据模型在测试集中的表现来调整模型的各个参数，最终得到在测试集上表现较好的一个结果。但是重复调整的次数越多，模型的泛化能力就越低，因为测试集暴露给模型的信息也越多。\n\n可引入验证集，使测试集暴露给模型的信息更少，来减少过拟合的风险，提高模型的泛化能力。\n\n算法流程：\n\n* 划分数据集为三个子集：训练集、验证集、测试集\n* 在训练集上训练，使用验证集进行验证，直到模型在验证集上表现良好\n* 将上一步训练好的模型用于测试集，评估模型的泛化能力。\n\n\n\n\n\n","categories":["ML"]},{"title":"Machine Learning-3","url":"/2018/07/26/Machine-Learning-template/","content":"\n\n\n<!-- more -->\n\n","categories":["ML"]},{"title":"docker使用","url":"/2018/07/26/docker/","content":"\n在linux下，为了保持系统的纯净，使用Docker来安装各种环境，下面记录下docker的一些使用\n\n<!-- more -->\n\n## 安装docker\n\n一般情况下，可以直接使用下面命令安装docker，但不推荐使用\n\n```\nsudo apt install docker.io\n```\n\n这里使用 docker官网提供的方案安装，首先添加官方源，然后安装\n\n1、卸载之前的版本，不会删除容器和镜像等\n\n```\nsudo apt-get remove docker docker-engine docker.io\n```\n\n2、添加docker官方源\n\n```\nsudo apt update\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n```\n\n3、添加官方 GPG key\n\n```\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n4、查看是否添加成功，没有错误输出即可\n\n```\nsudo apt-key fingerprint 0EBFCD88\n```\n\n5、设置 稳定版 源，这里使用的是 ubuntu18.04 系统，若下面命令报错，提示你的发行版本不支持，可以手动修改$(lsb_release -cs) 为你发行版本。比如基于ubuntu18.04的 mint 可以修改为 bionic\n\n```\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n```\n\n6、安装docker\n\n```\nsudo apt update\nsudo apt install docker-ce\n```\n\n7、将当前用户加入docker组,注销当前会话，重新登录后生效\n\n```\nsudo gpasswd -a ${USER} docker\n```\n\n\n\n## 使用阿里云加速器\n\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://xbagkcb9.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n## 安装 nvidia-docker\n\n官方参考链接\n\n[github-nvidia-docker]: https://github.com/NVIDIA/nvidia-docker\n\n```\n# If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers\ndocker volume ls -q -f driver=nvidia-docker | xargs -r -I{} -n1 docker ps -q -a -f volume={} | xargs -r docker rm -f\nsudo apt-get purge -y nvidia-docker\n\n# Add the package repositories\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\\n  sudo apt-key add -\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \\\n  sudo tee /etc/apt/sources.list.d/nvidia-docker.list\nsudo apt-get update\n\n# Install nvidia-docker2 and reload the Docker daemon configuration\nsudo apt-get install -y nvidia-docker2\nsudo pkill -SIGHUP dockerd\n\n# Test nvidia-smi with the latest official CUDA image\ndocker run --runtime=nvidia --rm nvidia/cuda:9.0-base nvidia-smi\n\n```\n\n## 启动 R\n\n```\ndocker run -e PASSWORD=rstudio2018 --rm -p 8787:8787 -v /home/liu/Documents/code/r:/home/rstudio rocker/verse\n```\n\n##  \n\n## Tensorflow\n\n官方教程： https://www.tensorflow.org/install/docker\n\n打开 Tensorflow 命令行\n\n```\ndocker run --runtime=nvidia -it tensorflow/tensorflow:latest-gpu bash\n```\n\n","categories":["linux日常使用"]},{"title":"汇编语言学习笔记","url":"/2018/07/26/complie/","content":"\n汇编语言是计算机的基础。\n\n<!-- more -->\n\n#### 1、计算机中的进制\n\n* 二进制：  B\n\n* 八进制： O\n\n* 十六进制： H\n\n\n\n2、CS/IP\n\n* 物理地址=段地址×10H+偏移地址\n* 同一物理地址可使用不同的段地址和偏移地址组成\n\n8086 CPU含4个段寄存器：\n\n* CS: 代码段寄存器（Code Segment）\n* DS: 数据段寄存器（Data Segment）\n* SS: 栈段寄存器（Stack Segment）\n* ES: 附加段寄存器（Extra Segment）\n\nCS/IP所指向的内容是代码段，CPU会将其内容作为即将执行的指令。若要对其进行修改有下面两种方法：\n\n1、修改IP的内容：jmp 某一合法寄存器，eg: mov IP,bx\n\n* eg: jmp bx \n  * 执行前: bx=0B16H, CS=2000H,IP=0003H\n  * 执行后: bx=0B16H, CS=2000H,IP=0B16H\n\n2、同时修改CS/IP的内容：\n\n* eg: jmp 2AE3:3     -> 从2AE33H处读取指令\n* eg: jmp 3:0B16     -> 从30B16H处读取指令\n\n","categories":["汇编语言"]},{"title":"Ubuntu18.04下设置终端启动大小和位置","url":"/2018/07/26/BlogTemplate/","content":"\n在Linux下，用的最多的就是 Terminal了\n\n<!-- more -->\n\n","categories":["linux"]},{"title":"sudo apt upgrade命令失败","url":"/2018/07/26/apt升级命令失败问题/","content":"\n在Ubuntu下，可以使用debian的包管理器apt-get来管理系统软件，然而常常遭遇命令运行失败问题，在此记录解决方案。\n\n<-- more !-->\n\n## sudo apt-get upgrade 命令报错\n\n报错信息如下\n\n```\nE: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)\nE: Unable to lock the administration directory (/var/lib/dpkg), is another process using it?\n```\n\n解决方案：\n\n1、找出并杀掉所有 apt-get 进程\n\n```\nps -A | grep apt\nsudo kill -9 id_num\n```\n\n2、若上一步之后仍然报错，则需删除锁定的文件。\n\n锁定的文件会阻止 Linux 系统中某些文件或者数据的访问。一旦运行了 apt-get 或者 apt 命令，锁定文件将会创建于 `/var/lib/apt/lists/`、`/var/lib/dpkg/`、`/var/cache/apt/archives/` 中。\n\n这有助于运行中的 apt-get 或者 apt 进程能够避免被其它需要使用相同文件的用户或者系统进程所打断。当该进程执行完毕后，锁定文件将会删除。\n\n**重要提醒：**万一你在没有看到 apt-get 或者 apt 进程的情况下在上面两个不同的文件夹中看到了锁定文件，这是因为进程由于某个原因被杀掉了，因此你需要删除锁定文件来避免该错误。\n\n```\nsudo rm /var/lib/dpkg/lock\nsudo rm /var/lib/apt/lists/lock\nsudo rm /var/cache/apt/archives/lock\nsudo dpkg --configure -a\nsudo apt-get update -y\n```\n\n","categories":["linux"]},{"title":"vim 手册","url":"/2018/07/26/Vim手册/","content":"\n在Linux下高效的使用 vim\n\n<!-- more -->\n\n**打开关闭**\n\n- vim xxx，vim +num xxx 命令行打开文件\n  vim + filename 启动跳到文件结尾\n  vim +143 filename 打开跳到143行 调试代码有用\n  vim +/search-term filename 跳到第一个匹配\n  vim +/search-term filename 跳到最后一个匹配\n  vim -t tag\n  vim —cmd command filename 加载文件前执行命令\n  vim -c “:50” filename 加载文件后执行命令\n  :e xxx vim中打开文件\n  :w[rite],:up[date],:w!,up!，:wall保存文件\n  : x,:q,:qa,:q!,退出文件\n  gf 普通模式下打开文件名为光标处文字的文件\n  Ctrl+W f 新窗口打开匹配的文件\n  Ctrl+W fg 新tab页打开匹配的文件\n\n**代码相关**\n\n- <,>对代码进行缩进\n  <<,>>用于调整源代码缩进格式\n  = 用户自动格式化代码缩进，gg=G 即为全文格式化\n  zf,zo,zc,za,zR,zM对代码进行折叠打开折叠\n  Ctrl+],Ctrl+T查找函数的定义和返回\n  大写K，看光标所指标识符的man帮助\n\n**移动光标**\n\n- h,j,k,l ←↓↑→ 移动光标，相当于四个方向键\n  w,b,e,ge 以单词的方式移动，可以nw，nb，ne，nge的方式移动n个单词的距离\n  W，B，E，gE会以连续字符串的方式移动\n  0,^,g_,移动到行首，行尾以及后面第n行的行尾\n  gg,G,nG，ngg 移动到文件头和文件尾，以及移动到文件的第n行，‘可以回到上一次的地方\n  H,M,L n%定位光标到当前屏幕的某个地方\n  {,},[[,]],(,) 段落，区块，语句导航\n  z回车，z-,zz.当前行置顶，置底，置中\n  Ctrl+G显示当前位置信息\n  Ctrl+F，Ctrl+B，Ctrl+U,Ctrl+D,Ctrl+E,Ctrl+Y,向前后滚动一屏，半屏，一行\n  Ctrl+I,Ctrl+O 光标移到下一次和上一次的地方，Ctrl+I 和Tab功能一样\n  ‘,”,[,]为跳转前的位置，最后编辑的光标位置，最后修改的开始位置，最后修改的结束位置\n  Ctrl+^ 在两个文件之间轮换\n  ‘“,’.，`.上一次光标的地方，上一次修改的地方\n\n**编辑**\n\n- i,a,o,I,A,O分别进入插入模式\n  o 在当前光标所在行下方插入一行，O在当前光标所在行上方插入一行\n  J 删除换行符，合并两行\n  Ctrl-R 重做\n  u，nu撤销上一次更改，撤销n次更改\n  U 撤销整行的更改\n  Ctrl+R 重做更改\n  Ctrl+L 重新加载屏幕内容\n  y,d,p 表示拷贝，删除，粘贴，配置位置描述使用 yw，dw，y0,d0,y,yfa,dfa,yy,dd,D,dG,dgg等，前面可以加数字，表示重复如，3dd,3yy等，也可以加范围，如4,8yy\n  %y+.y+,N,My+ 拷贝指定的数据\n  :[range] g[lobal[!]] /{pattern}/ [cmd]\n  :[range] v[global[!]] /{pattern}/ [cmd]\n  n,p,next,previous,Ctrl+^在编辑的文件中切换\n  :ls 查看打开的文件\n  :e #n 打开标号为ls结果中的文件\n  :changes 查看文件变化\n  ga查看ASCII,十进制，十六进制\n\n**查找**\n\n- /pattern-回车 在文件内向后查找pattern的匹配，n重复，N回退，n前面可以带数字\n  ?pattern-回车 在文件内向前查找pattern的匹配，n重复，N回退，n前面可以带数字\n  f{char}/t{char} 在行内查找下一指定字符， ;重复， ,回退\n  F{char}/T{char} 在行内查找上一指定字符， ;重复， ,回退\n  *，#高亮所有匹配光标所在单词，相当于输入了/word,如果想单独匹配单词/\\<word\\>,则需要g*,g# ，gd提留在非注释段的第一个匹配\n  \\<,\\>表示匹配单词的开头和结尾\n  .,^,$在查找的过程中作为正则策略，如果需要完全匹配需要转义\n  % 查找匹配的括号() [] {}\n\n**替换**\n\n- . 重复上次的修改（一定要是修改） 比如说上次删除一个字符，点就是删除一个字符的意思；如果上次是删除一行，点就是删除一行的意思了。\n  \\>G 当前行缩进一个单位（Tab）\n  :[range]s[ubstitute]/{pattern}/{string}/[flags] 将范围内的from 改为to，替换当前行\n  :[range]%s[ubstitute]/{pattern}/{string}/[flags] 将范围内的from 改为to,替换所有行\n  范围可以指定为m,n的数字形式，当个的数字表示特定的行，.表示当前行，如果字符串中本身包含/,则可用+，=替换原来的/\n  :[range]s[ubstitute]/{pattern}/{string}/[flags] [count]\n\n**外部&&内部命令替换**\n\n- :shell 交互式shell\n  :!cmd 执行cmd并输出结果\n  :! 执行上一次的命令\n  :r[ead] !cmd当前光标写入命令结果\n  :上下方向键 查找命令\n  :[range]co[py] {address} 复制指定范围的行到指定地址，简写为t 理解为copyto\n  :[range]m[ove] {address} 移动命令\n  :@:重复VIM命令，.重复普通命令\n  Ctrl+D补全命令\n  :[range] delete [x]\n  :[range] yank [x]\n  :[range] put [x]\n  :[range] copy {address}\n  :[range] move {address}\n  :[range] normal {commands}\n  :[range] join\n  :[range] substitute/{pattern}/{string}/[flags]\n  :[range] global/{pattern}/[cmd]\n\n**选项设置**\n\n- set xxx 设置某项\n  set noxxx 取消某项设置\n  set xxx! 反置某项值\n  set xxx& 恢复默认值\n  set xxx? 查询当前状态+\n  setlocal 局部有效，set全局有效+\n  :set expandtab 将tab转换为space\n  :set tabstop=4 制表符宽度 tabstop=4或ts=4\n  :retab 按照设定值重新缩进\n  :set shiftwidth=4 行缩进时宽度\n  :set ai 自动缩进\n\n**代码格式化**\n\n- **=**全文格式化 gg=G，比如粘贴的内容\n  当前行格式化缩进 ==\n  当前光标所在行的后N行格式化 N==\n  选中行格式化，=","categories":["linux"]},{"title":"Ubuntu18.04下MATLAB字体问题","url":"/2018/07/26/Ubuntu18.04 下MATLAB字体问题/","content":"\n在 Ubuntu18.04 下安装了 MATLAB R2016b，打开后字体十分难看，还有锯齿，在这里记录下自己的解决办法\n\n<!-- more -->\n\n因为在 linux下 MATLAB使用的是自带的 java环境中的字体，由于自带字体在 linux下显示不佳，这里我们选择一款适合编程的等宽字体 YaHei.Consolas.ttf 替换 MATLAB自带字体，开启 MATLAB 的防锯齿功能，实现MATLAB 字体的美化。\n\n##  一、修改 MATLAB字体\n\n1、首先准备  YaHei.Consolas.ttf （请自行百度，选择其他字体也可）\n\n```\ncp YaHei.Consolas.ttf /opt/MATLAB/R2016b/java/jre/glnxa64/jre/lib/fonts\nmkfontscale\nmkfontdir\nfc-cache \n```\n\n2、在 MATLAB 预设项中选择  YaHei.Consolas字体即可，在字体界面，勾选最下方一行，开启防锯齿功能\n\n3、设置 MATLAB 界面背景为 豆沙绿\n\n##  二、设置 MATLAB的工作目录\n\n日常使用中，MATLAB的工作目录默认不在家目录下面，给日常使用带来了不便，在此将 MATLAB的工作目录修改为 ～/Documents/MATLAB\n\n```\nsudo gedit /opt/MATLAB/R2016a/toolbox/local/matlabrc.m  #将下面这行加在末尾\ncd '~/Documents/mymatlabPath'\n```\n\n## 三、MATLAB 个人配置文件无法访问\n\n```\nsudo chown -R ${USER}:${USER} ~/.matlab\n```\n\n## 四、配置MATLAB启动图标\n\n```\ncd ~/App/icons/\nwget http://upload.wikimedia.org/wikipedia/commons/2/21/Matlab_Logo.png #从维基百科上下载图标\nsudo gedit /usr/share/applications/matlab.desktop #填写下面的内容\n\n#!/usr/bin/env xdg-open\n \n[Desktop Entry]\nType=Application\nTerminal=false\nExec=/usr/local/MATLAB/R2018a/bin/matlab %U    \nName=MATLAB_R2018a\nIcon=～/Apps/icons/Matlab_Logo.png\nComment=Matlab:The Language of Technical Computing\nCategories=Development;Matlab; \n\n```\n\n\n\n至此，一个舒适的matlab编程环境就已经打造完成，enjoy～","categories":["linux"]},{"title":"Pandas的23个常用操作","url":"/2018/07/26/Pandas的23个常用操作/","content":"\nPandas库是Python中用于数据处理的常用库，能大大简化数据操作，下面记录下Pandas常用的23个操作。\n\n<!-- more -->\n\n[23 种 Pandas 核心操作，你需要过一遍吗？]: https://www.jiqizhixin.com/articles/082602\n\n","categories":["ML"]},{"title":"PowerShell","url":"/2018/07/26/PowerShell/","content":"\n# PowerShell\n\nPowerShell 笔记\n\nenvironment： win10 pro 64bit, PowerShell 5\n\n<!-- more -->\n\n* $PSVersionTable   :查看当前PowerShell版本\n\n\n\n### PowerShell 美化:oh-my-posh\n\n```\nInstall-Module posh-git -Scope CurrentUser  #安装依赖\nInstall-Module oh-my-posh -Scope CurrentUser  #安装本身\n```\n\n","categories":["shell"]},{"title":"Ubuntu18.04下文件系统问题","url":"/2018/07/26/Ubuntu18.04 下文件系统/","content":"\n自己电脑安装的是 win10 和 Ubuntu18.04 双系统，在ubuntu系统的使用过程中，遇到不少 linux下文件系统的问题，在此记录下解决办法。\n\n<!-- more -->\n\n\n\n## 一、linux 挂载 NTFS 分区 可读不可写问题\n\n\n\nlinux文件系统是 ext4， win10的文件系统是 NTFS，linux可以对 NTFS系统进行读写操作，为像我这样的双系统使用者带来了方便，我 win系统和linux 系统的文档都习惯放在同一个分区， D:(doc)，但是实际使用过程中，linux系统常常无法将文件写入该分区，解决办法：\n\n1、编辑  /etc/fstab 文件设置自动挂载\n\n```\nvi /etc/fstab   #添加下面一行，第一个是设备，第二个是挂载目录，第三个是文件系统\n/dev/sdb5                /win_linux         ntfs   defaults         0       0\n```\n\n2、关闭 win10 快速启动，在 设置->电源->更多电源选项 中配置，具体配置步骤请百度\n\n\n\n## 二、常用文件夹没有读写权限问题\n\n\n\nubuntu默认是以普通用户登入系统的，对一些文件夹常常没有写权限，获取临时写权限可使用sudo命令，但对于常用的文件夹，还有一些软件保存文件的时候，会很不方便，此时可对文件夹权限进行设置：\n\n```\nsudo chmod 777 -Rf /dir #4 2 1 读 写 执行\n```\n\n\n\n","categories":["linux"]},{"title":"Cmder","url":"/2018/07/25/cmder/","content":"\nwindows下最佳命令行工具cmder的配置和使用\n\n<!-- more -->\n\n[cmder官网]: http://cmder.net/\n[安装配置教程]: https://blog.csdn.net/xiaosayidao/article/details/78722726\n\n此次安装版本为cmder3.6版本\n\n配置：\n\n* 添加环境变量\n\n* 添加到右键菜单\n\n  在管理员权限的命令窗口下输入：\n\n```\nCmder.exe /REGISTER ALL \n```\n\n**快捷键：**\n\n> win+alt+p 唤出设置界面  \n\n**解决中文乱码问题**\n\n> 设置界面>Startup>Environment; 添加 set LANG=zh_CN.UTF-8 \n\n**cmder设置$符号**\n\n> 本次安装版本为3.6版本，网上3.0、3.2等老版本方法均不适用，暂时未知解决方案","categories":["shell"]},{"title":"linux配置篇","url":"/2018/07/16/win和linux多系统配置/","content":"\n\n# Linux Config\n**声明：本教程包括本博客所有内容均为笔记性质，非教程性质。禁止任何形式的转载**\n\n近日安装linux和win10双系统，Linux发行版安装过程一路坎坷，因为之前已经安装过ubuntu18.04，听说Manjaro和mint不错，于是开始了自己的Manjaro-> mint-> ubuntu18.04 的作死之旅，最终还是回到了熟悉的ubuntu18.04下面。\n\n<!-- more -->\n\n## 系统引导和Grub2\n系统启动时需要引导程序引导，win10和linux双系统的情况下，先安装win10，再安装linux发行版，即可自动使用grub2引导双系统。\n\n接下来记录下自己安装过的各个linux发行版需要注意的问题\n\n\n### Manjaro\n\n* 安装时选择闭源驱动(none free), 否则容易出现兼容问题\n* 磁盘分区时，必须挂在  /boot/efi 分区到windows的efi分区(本人电脑为sda2) ，无需格式化，保留原来的FAT32文件系统，tags选择eps、boot\n* 记住自己磁盘分区的顺序以及各个分区位置，出问题好恢复\n\n#### manjaro引导\n**安装完成后，可能无法进入manjaro，可以尝试以下方法：**\n​\t\n​\t1、进入开机启动项寻找manjaro的启动项，进入manjaro后再修复\n​\t2、无法进入manjaro, 进入win10, 以管理员身份运行下面的命令：\n​\t\t$ bcdedit /set {bootmgr} path \\EFI\\Manjaro\\grubx64.efi\n\n#### grub rescue\n我安装双系统后，又对磁盘进行了操作，导致无法引导进入系统，grub进入 grub rescue模式，以下记录下修复过程,以下方法对 boot未单独分区时无效。\n\n\trescue 模式下使用的命令有限，只有 ls 、set 、insmod、normal等简单命令，如需退出可使用自己电脑的快捷键重启或者强制关机\n\n> set  #查看grub信息\n> ls  #列出所有磁盘，接下来寻找自己的boot分区\n> ls (hd0,gpt*)/boot/grub #把*换成数字，不断去试，输出有grub、boot之类的就找到了\n> set prefix=(hd0,gpt6)/boot/grub root=hd0,gpt6\n >insmod nornal\n > normal   #一直未报错即可正常重启\n\n以上方法只是临时的，进入系统后需要修复引导\n\n> sudo grub-install /sda5  #此命令记不清了有可能错了，请baidu\n> sudo grub-update   #更新grub信息\n\nubuntu用户可使用boot-repair软件自动完成\n\n> sudo add-apt-repository ppa:yannubuntu/boot-repair && sudo apt-get update\n> sudo apt-get install -y boot-repair && boot-repair\n>  查找桌面图标启动boot-repair\n\n配置启动项\n> sudo add-apt-repository ppa:danielrichter2007/grub-customizer\nsudo apt-get update\nsudo apt-get install grub-customizer\n详情请查看如下博客：\n[ubuntu18.0+win10 grub2修复与启动项管理](https://blog.csdn.net/zero_hzz/article/details/79205422) \n\n### mint\nmint是基于ubuntu修改的开箱即用的linux发行版，但是我在安装的时候无法成功安装boot，尝试好几种修复方式未成功，原因至今未明\n\n\n\n### kali\n\n安装kali后，需要进行一些简单配置来进行使用\n\n```\n#系统更新\napt update\napt upgrade\n\n#软件安装\napt install pkg_name -y\napt install ./deb_name.deb #或者使用下面的命令\ndpkg -i deb_name.deb\n\n#安装两个字体来兼容windows文件\napt install ttf-mscorefonts-installer #微软字体\napt install fonts-wqy-microhei    #文泉驿微米黑\n\n#安装kali的所有安全工具\napt install kali-linux-all\n\n#修复add-apt-repository\nsudo apt-get install python3-software-properties\nsudo apt-get install apt-file\nsudo apt-file update\ngedit /usr/sbin/add-apt-repository\n\n#! /bin/bash\nif [ $# -eq 1 ]\nNM=`uname -a && date`\nNAME=`echo $NM | md5sum | cut -f1 -d\" \"`\nthen\nppa_name=`echo \"$1\" | cut -d\":\" -f2 -s`\nif [ -z \"$ppa_name\" ]\nthen\necho \"PPA name not found\"\necho \"Utility to add PPA repositories in your debian machine\"\necho \"$0 ppa:user/ppa-name\"\nelse\necho \"$ppa_name\"\necho \"deb http://ppa.launchpad.net/morphis/anbox-support/ubuntu artful main\" >> /etc/apt/sources.list\napt-get update >> /dev/null 2> /tmp/${NAME}_apt_add_key.txt\nkey=`cat /tmp/${NAME}_apt_add_key.txt | cut -d\":\" -f6 | cut -d\" \" -f3`\napt-key adv --keyserver keyserver.ubuntu.com --recv-keys $key\nrm -rf /tmp/${NAME}_apt_add_key.txt\nfi\nelse\necho \"Utility to add PPA repositories in your debian machine\"\necho \"$0 ppa:user/ppa-name\"\nfi\n\n#安装java\ncd /usr/sbin/ && ./add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install java-common oracle-java8-installer\nsudo apt-get install oracle-java8-set-default\n\n\n```\n\n\n\n\n\n## Ubuntu18.04配置\n几番折腾，最后还是回到了ubuntu，manjaro虽说省事，但是KDE的桌面环境实在不适合我，manjaro安装的QQ\\Tim都无法使用，中文字体问题也是让我烦心，很多软件都没有官方支持，比如SPSS在manjaro下就无法安装，所以换回熟悉稳定的Ubuntu，这里使用的是Ubuntu18.04 64bit\n\n### 字体\ncopy windows下C盘fonts文件夹，放入ubuntu的 /usr/shar/fonts文件夹中，然后重新生成字体缓存，即可使用\n\n>sudo  cp ~/Temp/WinFonts  /usr/share/fonts\n>sudo fc-cache -f -v\n\n### 安装java\n首先卸载自带的openjdk，然后下载oracle的jdk8，解压后放入 /usr/local/ 中，最后编辑 /etc/profile文件添加全局变量\n\n> sudo apt-get remove openjdk* #卸载自带的openjdk\n> sudo mv jdk8  /usr/local/\n> sudo gedit /etc/profile\n\n添加下面的内容：\n​\t\n​\t#JAVA\n​\texport JAVA_HOME=\"/opt/jdk1.8.0_172\"\n​\tCLASSPATH=$CLASSPATH.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib\n​\texport PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin\n\n验证安装\n\n\tjava -version\n\n### 桌面图标\ngnome桌面的图标文件存放位置一个在： /usr/share/applications\n\n另外一个在：~/.local/share/applications\n\n两个桌面图标模板\n\n\t [Desktop Entry]\n\tName=Typora\n\tComment=a minimal Markdown.\n\tGenericName=Markdown Editor\n\tExec=typora %U\n\tIcon=typora\n\tType=Application\n\tStartupNotify=true\n\tCategories=Office;WordProcessor;\n\tMimeType=text/markdown;text/x-markdown;\n\t\n\t[Desktop Entry]\n\tVersion=1.0\n\tType=Application\n\tName=NetEase Cloud Music\n\tName[zh_CN]=网易云音乐\n\tName[zh_TW]=網易雲音樂\n\tComment=NetEase Cloud Music\n\tComment[zh_CN]=网易云音乐\n\tComment[zh_TW]=網易雲音樂\n\tIcon=netease-cloud-music\n\tExec=netease-cloud-music %U --nosanbox\n\tCategories=AudioVideo;Player;\n\tTerminal=false\n\tStartupNotify=true\n\tStartupWMClass=netease-cloud-music\n\tMimeType=audio/aac;audio/flac;audio/mp3;audio/mp4;audio/mpeg;audio/ogg;audio/x-ape;audio/x-flac;audio/x-mp3;audio/x-mpeg;audio/x-ms-wma;audio/x-vorbis;audio/x-vorbis+ogg;audio/x-wav;\n\n### 使用zsh\n\n[ZSH](https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH) \n[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) \n\n1、第一步：安装zsh\n> sudo apt-get install zsh\n\n2、第二步：安装oh-my-zsh\n> sudo sh -c \"$( sudo wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n3、使用zsh\n> chsh -s /bin/zsh\n\n### 安装Anaconda\n下载下安装文件后进行安装，安装过程中选择修改 bashrc，添加conda命令\n\n移除清华源\n\n```\nconda config --remove channels 'https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/' \n```\n\n配置中科大源\n\n> ```\n> conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/\n> conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n> conda config --set show_channel_urls yes\n> ```\n\n安装R环境\n> conda install -c r r-essentials\n\n安装虚拟环境\n\n> conda create -n env_name python=3.4\n\n### pip使用\n\n```\n生成requirements.txt文件\npip freeze > requirements.txt\n\n安装requirements.txt依赖\npip install -r requirements.txt\n```\n\n### 安装hexo\n官网教程：[hexo](https://hexo.io/zh-cn/docs/index.html) \n\n**git仓库添加本机指纹**\n> ssh-keygen -t rsa # 一直回车下去，不输入密码\ncat ~/.ssh/id_rsa.pub \n\n将输出结果复制，进入github，点击头像-> settings -> ssh and keys中添加本机指纹\n\n**安装hexo**\nhexo依赖于git和nodejs，先安装nodejs，然后运行下面的命令安装hexo\n> npm install -g hexo-cli\n\n>hexo generate -d  #收集文件并部署\n报错，完善信息如下\n>git config --global user.email \"你的邮箱\"\n>git config --global user.name \"你的名字\"\n\n### Internet\n\n##### DNS刷新\n\n```\nsudo apt install nscd\nsudo /etc/init.d/nscd restart\n```\n\n\n\n##### SSR\n\n将下载下来的ssr-manyuser 文件解压后放入 /usr/local/目录下，正确填写 config.json中的配置，将配置copy进shadowsock文件夹，使用如下命令启动：\n\n> cd /usr/local/shadowsocksr-manyuser/shadowsocks/ \n> python3 local.py -d start/stop\n\n设置快捷命令\n\n> gedit ~/.bashrc\n> 添加下面内容\n\n```\nalias ssr=\"cd /usr/local/shadowsocksr-manyuser/shadowsocks/ && python3 local.py -d \"\n```\n\n##### proxy\n\n###### proxychain\n\n```\nsudo apt-get install privoxy\nsudo gedit /etc/privoxy/config \n```\n\n在文档中搜索“listen-address”（即监听地址），找到如下一行：`listen-address  localhost:8118`  确保它没有被注释（如果这一行有#号，就手动删除）。再查找“forward-socks5t”，找到如下一行：`forward-socks5t   /               127.0.0.1:1080 .` 同样确保它没有被注释。如果没有这一行，就手动添加（注意！句尾那个点 . 是要写的！）。然后保存退出，再执行以下命令启动privoxy：\n\n```\nsudo privoxy --user privoxy /etc/privoxy/config\n```\n\n编辑配置文件/etc/profile 设置全局代理如下\n\n```\n# 先进入编辑模式\nsudo gedit /etc/profile\n\n# 在末尾添加以下三行：\nexport http_proxy=http://127.0.0.1:8118\nexport https_proxy=http://127.0.0.1:8118\nexport ftp_proxy=http://127.0.0.1:8118\n```\n\n或者按照上面的配置在桌面右上角设置网络代理如上\n\n###### privoxy\n\n```\nsudo apt-get install proxychains  # 安装proxychains\nsudo vi /etc/proxychains.conf     # 修改配置文件\n将最后一行改成:\nsocks5  127.0.0.1 1080\n之后在需要代理的命令前加上 proxychains 即可\n```\n\n**解决Linux下解压zip包后的文件名乱码问题**\n\n```\n$ unzip -O cp936 xxx.zip\n```\n\n##### \n\n### Ubuntu软件安装\n\n**软件目录**\n- VS code：编辑器\n- chrome： 登陆账号后会自动同步浏览器设置\n- 网易云英语： 音乐类软件\n- wechat: 微信\n- SMplayer 视频播放器\n- teamviewer: 远程连接\n- pdfmaster: pdf编辑器\n- GIMP： 图片编辑器\n\n**较难安装软件**\n\n- WPS: 文档编辑器\n- sougoupinyin: 搜狗拼音输入法\n- ssr: 安装包，网上下载ssr-manyuser文件然后手动配置(先lantern)\n- Tim:  社交软件\n- proxyee-down: 百度下载神器\n- lingo :数学建模\n\n**Flatpak**\n很多包基于Flatpak发布，安装Flatpak环境能够让我们更轻松的安装更多的包\n参考：[Install Flatpak官方教程](https://flatpak.org/setup/Ubuntu/) \n\n> sudo add-apt-repository ppa:alexlarsson/flatpak\n  ​     sudo apt update\n  ​     sudo apt install flatpak\n    sudo apt install gnome-software-plugin-flatpak\n    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo\n\n前面几个安装都较为简单，记录下较难软件的安装\n​\t\n​\tsudo dpkg -i pkg.deb #安装软件包命令\n​\tsudo apt install -f  #修复破损依赖命令\n\n##### WPS\n**参考博客：** [Ubuntu18.04安装wps office](https://blog.csdn.net/gongchenyu/article/details/80500150) \nwps的安装依赖于一个特殊的libpng软件，需先安装，然安装下载的wps-office安装包，最后解决字体问题（字体部分已解决）。\n\n> wget http://ftp.cn.debian.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1+deb7u2_amd64.deb\nsudo dpkg -i libpng12-0_1.2.49-1+deb7u2_amd64.deb\nsudo dpkg -i wps-office_10.1.0.5707-a21_amd64.deb\n\n\n\n```\n#字体问题\nhttps://pan.baidu.com/s/1eS6xIzo  #下载相关字体，并解压缩\nsudo cp mtextra.ttf  symbol.ttf  WEBDINGS.TTF  wingding.ttf  WINGDNG2.ttf  WINGDNG3.ttf  /usr/share/fonts\ncd /usr/share/fonts &&\nsudo mkfontscale &&\nsudo mkfontdir &&\nsudo fc-cache\n```\n\n\n\n##### sogou拼音\n\n> sudo apt-get remove ibus   // 卸载ibus\nsudo apt-get remove scim \nsudo apt-get autoremove   // 删除依赖包\nsudo apt-get -f install   // 修正安装过程中出现的依赖性关系\n\n> sudo apt-get install fcitx-bin\n> sudo apt-get install fcitx-table\n\n接下来安装下载的搜狗拼音包，出现依赖问题使用下面的命令修复\n> sudo apt install -f \n> fcitx-config-gtk3  # 如果找不到config选项，使用该命令打开fcitx进行配置，若提示该命令不存在，则按提示安装相应包\n\n\n##### Tim\n此处采用AppImage方式安装Tim，较为简单方便\n\n```bash\nsudo apt-get install wine  #安装最新版wine\ncd /opt/Tim\n./TIM-x86_64.AppImage #运行Tim\n```\n\n##### imusic\n\n搜索ieaseMusic安装，下面对desktop文件进行修改，美化客户端\n\n```bash\n[Desktop Entry]\nName=iMusic\nComment=这应该是最好的网易云音乐播放器了，没有之一，如果有请打醒 🤘\nExec=\"/opt/ieaseMusic/ieaseMusic\" %U\nTerminal=false\nType=Application\nIcon=rhythmbox\nCategories=Music;\n```\n\n#####  ivdeo\n\n\n\n[github地址]: https://github.com/phobal/ivideo\n\n```\n[Desktop Entry]\nName=iVideo\nComment=A wonderful video player\nExec=smplayer %U\nExec=\"/home/lyz/Apps/git-apps/ivideo/electron-react-boilerplate\" %U\nTerminal=false\nType=Application\nIcon=smplayer\nCategories=Video;\n```\n\n\n\n**问题解决**：\n\n* TIM-x86_64.AppImage 无法运行，解决办法 \n\n  > sudo chmod a+x TIM-x86_64.AppImage\n\n* Tim启动后无法输入中文\n\n  > 在/etc/environment中加入 \n  >\n  > export GTK_IM_MODULE=fcitx \n  >\n  > export QT_IM_MODULE=fcitx \n  >\n  > export XMODIFIERS=[@im](https://github.com/im)=fcitx\n\n\n##### SPSS\n下载安装SPSS安装文件后，安装目录为 /opt/IBM/SPSS/Statistics/25 \n复制破解文件 lservrc到 25该目录\n\n>  /opt/IBM/SPSS/Statistics/25/\n> sudo cp lservrc /opt/IBM/SPSS/Statistics/25/\n> sudo bash open.sh #开始激活，随便填一个邮箱即可\n> cd bin\n> ./spssclient  #启动spss\n\n##### lingo\n下载地址：\n> https://www.lindo.com/downloads/LINGO-LINUX-64x86-17.0.run\n\n下载后安装\n> sudo chmod 755 ./LINGO-LINUX-64x86-17.0.run -v\n> sudo ./LINGO-LINUX-64x86-17.0.run\n\n##### sublime text3配置\n[sublime中文问题解决](https://github.com/lyfeyaj/sublime-text-imfix) \ngnome下的sublime text3安装好后，配置相应主题即可得到漂亮的界面，但是不支持中文输入，此时需要按如下步骤操作\n\n* 官网下载 sublime-text-3压缩包，解压后，命名为 sublime-text放在 /opt/文件夹下\n\n> git clone https://github.com/lyfeyaj/sublime-text-imfix.git\n> cd sublime-text-imfix\n> ./sublime-imfix\n\n然后将sublime-text-imfix/src中的desktop文件复制到 /usr/share/applications/ 下面，更换原有桌面图标\n\n##### VS code无法启动\n可能是配置文件被加上了root权限，删除即可\n删除 ～/.config/.code 文件夹\n\n**配置VS code**\n\n选择工作目录，然后进行工作区设置\n\n> {\n>\n>     \"python.pythonPath\": \"/home/liu/opt/anaconda3/envs/pyplay/bin/python\"\n>\n> }\n\n##### typora 修改字体\n\n打开theme主题，修改css文件，在body标签中的font family，将雅黑放最前\n\n```css\nbody {\n    font-family: \"Microsoft YaHei\",\"Open Sans\",\"Clear Sans\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    color: rgb(51, 51, 51);\n    line-height: 1.6;\n}\n```\n\n##### remarkable 修改字体\n\n```\nlocate remarkable\ncd /usr/lib/python3/dist-packages/remarkable/  #remarkable\nls -a \nsudo subl styles.py  #use sublime test edit\n\n```\n\nctrl+F查找 font-family字样，添加（Microsoft YaHei）微软雅黑字体\n\n```css\nfont-family: \"Microsoft YaHei\",\"Open Sans\",\"Clear Sans\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;\nbody{font:16px Microsoft YaHei,Helvetica,Arial,sans-serif;line-height:1.4;color:#333;word-wrap:break-word;padding:10px 15px}  #github\n```\n\n\n\n##### proxyee-down\n\n注意proxyee-down目录最好不要放在需要root权限的目录，此处放在 /usr/local/\n下载解压之后运行如下命令启动proxyee-down\n> cd /usr/local/proxyee-down/ \n> java -jar proxyee-down.jar\n\n### gnome美化\n\n\n\n#### 修改gdm\n\n在这里仅仅修改登录界面的背景\n\n```\ncd /etc/alternatives \ncp gdm3.css gdm3.css.bak\nsudo vi gdm3.css\n\n找到lockDialogGroup部分,并替换为下面的内容，url部分修改为自己想要使用的登录图片\n(vim编辑器使用 :?string 对字符串进行搜索)\n#lockDialogGroup {\n  background: #2c001e url(file:///usr/share/backgrounds/mypicture.jpg);         \n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n}\n```\n\n\n\n\n\nvi\n\n#lockDialogGroup {\n  background: #2c001e url(file:///usr/share/backgrounds/login.jpg);          \n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;  \n }\n\n**参考教程：**：[给Ubuntu18.04安装mac os主题](https://www.cnblogs.com/feipeng8848/p/8970556.html) \n主题资源：[gnome主题](https://www.gnome-look.org)  \n\n\t/usr/share/themes   #主题文件目录\n\t/usr/share/icons      #图标目录\n\thttps://www.gnome-look.org  #资源网址\n\n桌面环境为gnome，接下来安装配置gnome环境，使其像 mac一样，首先安装各种插件\n> sudo apt-get update\nsudo apt-get install gnome-tweak-tool gnome-shell-extensions \n> sudo apt-get install chrome-gnome-shell #使能够在chrome下直接安装gnome插件\n\n安装user theme、dash to dock两个插件，将下载下来的主题和图标放入系统主题和图标目录即可，注意看是否有多层目录\n然后在tweak里面设置自己喜欢的主题和图标\n\n##### 开机动画(plymouth theme)\n进入资源网站下载喜欢的开机动画，解压到/usr/share/plymouth/themes/文件夹，然后修改配置文件即可\n\n```\ncd /usr/share/plymouth/themes/\n\nsudo cp /usr/share/plymouth/themes/default.plymouth      /usr/share/plymouth/themes/default.plymouth.bak\n\nsudo gedit /usr/share/plymouth/themes/default.plymouth\n```\n\n修改[script]中的内容如下即可：\n\n\t[Plymouth Theme]\n\tName=Ubuntu Logo\n\tDescription=A theme that features a blank background with a logo.\n\tModuleName=script\n\t\n\t[script]\n\tImageDir=/usr/share/plymouth/themes/Mageia  #修改此处\n\tScriptFile=/usr/share/plymouth/themes/Mageia/mga.script   #修改此处\n\n\n##### grub美化\n\n**参考教程**： [GRUB2主题包手动安装设置及其简易修改](https://www.jianshu.com/p/6abe7c02777b) \n\n第一步： 复制GRUB2主题包到/boot/grub/themes\n\n第二步：修改GRUB配置文件并更新。\n\n打开/etc/grub.d/00_header文件\n\n\tsudo gedit /etc/grub.d/00_header\n\n在开头注释后添加\n\n\tGRUB_THEME=\"/boot/grub/themes/Theme_name/theme.txt\n\tGRUB_GFXMODE=\"1920×1080x32\" # 前面两个改成自己的分辨率\n\n第三步：更新GRUB\n\n\tsudo update-grub\n\n\n\n\n\n\n\n","tags":["linux"],"categories":["linux"]},{"title":"Neural Networks and Deep Learning 读书笔记","url":"/2018/04/20/Neural-Networks-and-Deep-Learning/","content":"选择了神经网络作为学习专题，在网上发现了 Michael Nielsen大神写的Neural Networks and Deep Learning书籍，由于网上翻译在gitbook上的内容大多有所缺失，词不达意，便阅读原版书籍，在此记录下读书过程中遇到的一些生僻概念和英文词汇\n<!-- more -->\n\n# 资料\n1.英文原版书籍地址[Neural Networks and Deep Learning](http://neuralnetworksanddeeplearning.com)\n2.不太好的中文翻译版[神经网络与深度学习（中文版）](https://www.gitbook.com/book/xhhjin/neural-networks-and-deep-learning-zh/details)\n3.有助于帮助理解的博文[神经网络入门-阮一峰的网络日志](http://www.ruanyifeng.com/blog/2017/07/neural-network.html)\n4.神经网络博文[神经网络浅讲：从神经元到深度学习](https://www.cnblogs.com/subconscious/p/5058741.html)\n\n# 重要概念记录\n> neural networks   #神经网络\n> backpropagation  #反向传播\n> gradient descent #梯度下降\n> stochastic gradient descent #随机梯度下降\n> hierarchy #层级\n> sequence  #序列\n> segmentation problem #分段问题\n> input layer/hidden layer/output layer #输入层、隐藏层、输出层\n> denote #表示\n> empirical #经验主义的\n> heuristic  # 启发式的\n> the sake of argument #为了论证\n> legitimately #合理正当的\n> mean squared error(MSE) #均方差\n> modifications #修改、变型\n> stick with it #坚持下去","categories":["Neural Networks and Deep Learning"]},{"title":"数据处理要点","url":"/2018/04/20/数据处理要点/","content":"系统： win10 专业版\n数据处理要点记录\n<!-- more -->\n\n# 数据清洗\n\n> 5、噪声与异常值，一个变量的测量总会存在偏差，偏差就是噪声，偏差较大就会成为异常值，若发现异常值之间存在某种规律，则不可轻易去除\n> 处理噪声： 均值获中位数移动平滑\n> 异常值： 聚类分析看是否有价值\n> \n\n# 数据变换\n\n> 数值变量与分类变量进行转换： 满意度不同的等级使用百分制代表，或者使用数字1、2、3代表\n> 构造新变量： 原始数据变量设置较为简单，在原变量基础上构造新变量以便进行分析\n> \n \n 数据平滑：\n\n 1、移动平均，3次、4次、8次移动平均，次数越多数据平滑效果越好\n\n 2、指数平滑法：\n\n 数据压缩：\n 1、维数压缩： 删除不必要的或者高度相关的指标  直观判断、R型聚类、主成分分析法、小波变换、逐步线性回归\n 2、提取特征值：  最大值最小值、中位数、平均值、积分微分、变化幅度、\n 3、随机抽样： 数据量太多时，抽样减少数据量； 数据量少时，通过多次简单随机抽样来验证模型\n ","categories":["数据处理"]},{"title":"计算机中的编码问题","url":"/2018/04/07/计算机中的编码问题/","content":"计算机中的编码问题：\n因为计算机只能处理数字，如果要处理文本，必须先将文本转换为数字才能处理。计算机将8比特作为一个字节进行处理，所以一个字节能表示的最大整数为255，要表示更大的整数，就要采用更多的字节。\n\n具体用那些二进制数字表示哪个符号，每个人都可以约定自己的一套方案，这就称之为编码。\n<!-- more -->\n\n# 目前常用的编码\n## ASCII编码：\n>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言,它是现今最通用的单字节编码系统.ASCII码一共定义了128个字符。\n### ASCII编码表\n\n### 大小规则：\n> 数字的ASCII码<大写字母的ASCII码<小写字母的ASCII码\n### 缺点\n>ASCII是美国标准，所以它不能良好满足其它国家的需要。例如英国的英镑符号（￡）在哪里？\n>拉丁语字母表重音符号,使用斯拉夫字母表的希腊语、希伯来语、阿拉伯语和俄语。\n>汉字系统的中国象形汉字，日本和朝鲜。\n\n>1967年，国际标准化组织（ISO：International Standards Organization）推荐一个ASCII的变种，代码0x40、0x5B、0x5C、0x5D、0x7B、0x7C和0x7D“为国家使用保留”，而代码0x5E、0x60和0x7E标为\n>“当国内要求的特殊字符需要8、9或10个空间位置时，可用于其它图形符号”。\n\n## GB系列编码\n由于ASCII编码的局限性，为了表示中文字符，并且不和ASCII码冲突，出现了GB系列编码。GB系列编码是我国的国标编码，使用两个字节来编码汉字，分为GB2312、GB18030、GBK，其中GBK是目前最通用的，在各种中文表示场合被广泛使用。\n### GBK编码\n>GBK编码，是对GB2312编码的扩展，因此完全兼容GB2312-80标准。GBK编码依然采用双字节编码方案，其编码范围：8140－FEFE，剔除xx7F码位，共23940个码位。共收录汉字和图形符号21886个，其中汉字（包括部首和构件）21003个，图形符号883个。GBK编码支持国际标准ISO/IEC10646-1和国家标准GB13000-1中的全部中日韩汉字，并包含了BIG5编码中的所有汉字。GBK编码方案于1995年12月15日正式发布，这一版的GBK规范为1.0版。\n\n#### GBK码位分配及顺序\n\n1.汉字区。包括：\n> a. GB 2312 汉字区。即 GBK/2: B0A1-F7FE。收录 GB 2312 汉字 6763 个，按原顺序排列。\n> b. GB 13000.1 扩充汉字区。包括：\n> (1) GBK/3: 8140-A0FE。收录 GB 13000.1 中的 CJK 汉字 6080 个。\n> (2) GBK/4: AA40-FEA0。收录 CJK 汉字和增补的汉字 8160 个。CJK 汉字在前，按 UCS 代码大小排列；增补的汉字（包括部首和构件）在后，按《康熙字典》的页码/字位排列。\n> (3) 汉字“〇”安排在图形符号区GBK/5：A996。\n\n2.图形符号区。包括：\n> a. GB 2312 非汉字符号区。即 GBK/1: A1A1-A9FE。其中除 GB 2312 的符号外，还有 10 个小写罗马数字和 GB 12345 增补的符号。计符号 717 个。\n> b. GB 13000.1 扩充非汉字区。即 GBK/5: A840-A9A0。BIG-5 非汉字符号、结构符和“〇”排列在此区。计符号 166 个。\n\n3.用户自定义区：分为(1)(2)(3)三个小区。\n>(1) AAA1-AFFE，码位 564 个。\n>(2) F8A1-FEFE，码位 658 个。\n>(3) A140-A7A0，码位 672 个。\n>第(3)区尽管对用户开放，但限制使用，因为不排除未来在此区域增补新字符的可能性。\n### GBK相关网址\n> http://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php\n\n\n\n\n# Unicode编码\n全世界有上千种语言，不同语言对应了不同的字符集，对应于不同的字符集产生了各种各样的编码方式。多种多样的编码方式成了系统开发者的噩梦，为了统一全世界所有语言中的字符，Unicode诞生了。\n> Unicode只有一个字符集，分为UCS-2标准和UCS-4标准\n> UCS-2标准采用两个字节编码一个字符，UCS-4标准采用四个字节编码一个字符\n> 目前普遍采用的是UCS-2标准，中日韩的三种文字占用了Unicode中0x3000到0x9FFF的部分\n## 优点\n> 只有一个字符集，避免了双字节字符集的二义性\n## 缺点\n> 定长存储，对A B C等单字符也采用了2个字节存储，造成了存储空间的浪费\n> 只能表示一些常用汉字，对一些生僻汉字无法表示，因为汉字大约6、7万个，而Uncoide总共只能表示六七万字符\n> 若采用UCS-4规范，采用四个字节表示，则造成了存储空间的极大浪费\n> 只规定了字符的编码，没有规定字符以何种形式存储和传输\n \n# UTF8编码\n为了克服Unicode编码的缺点，UTF8编码应运而生。在unicode的基础上，UTF8编码给出了字符的存储和传输方案。UTF-8 是目前互联网上使用最广泛的一种 Unicode 编码方式，它的最大特点就是可变长。它可以使用 1 - 4 个字节表示一个字符，根据字符的不同变换长度。\n**UTF8编码和Unicode编码两者之间的关系为：Unicode是内存编码表示方案（是规范），而UTF是如何保存和传输Unicode的方案（是实现）这也是UTF与Unicode的区别。**\n\n## 编码规则\n1. 对于单个字节的字符，第一位设为 0，后面的 7 位对应这个字符的 Unicode 码点。因此，对于英文中的 0 - 127 号字符，与 ASCII 码完全相同。这意味着 ASCII 码那个年代的文档用 UTF-8 编码打开完全没有问题。\n\n2. 对于需要使用 N 个字节来表示的字符（N > 1），第一个字节的前 N 位都设为 1，第 N + 1 位设为0，剩余的 N - 1 个字节的前两位都设位 10，剩下的二进制位则使用这个字符的 Unicode 码点来填充。\n\n    Unicode 十六进制码点范围| UTF-8 二进制\n    ---|--- \n    00000000 - 0000 007F| 0xxxxxxx \n    0080 - 0000 07FF| 110xxxxx 10xxxxxx\n    0000 0800 - 0000 FFFF|  1110xxxx 10xxxxxx 10xxxxxx \n\n根据上面编码规则对照表，进行 UTF-8 编码和解码就简单多了。下面以汉字“汉”为利，具体说明如何进行 UTF-8 编码和解码。\n\n“汉”的 Unicode 码点是 0x6c49（110 1100 0100 1001），通过上面的对照表可以发现，0x0000 6c49 位于第三行的范围，那么得出其格式为 1110xxxx 10xxxxxx 10xxxxxx。接着，从“汉”的二进制数最后一位开始，从后向前依次填充对应格式中的 x，多出的 x 用 0 补上。这样，就得到了“汉”的 UTF-8 编码为 11100110 10110001 10001001，转换成十六进制就是 0xE6 0xB7 0x89。\n\n解码的过程也十分简单：如果一个字节的第一位是 0 ，则说明这个字节对应一个字符；如果一个字节的第一位1，那么连续有多少个 1，就表示该字符占用多少个字节。\n\n# 其他编码\nUTF-16 UTF-32 用的不多，在此不过多介绍\n\n#python编码\n## ord()函数和chr()函数\n单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符\n>ord('A')\n>ord('a')\n>ord('汉')\n\n>chr(66)\n>chr(98)\n>chr(25991)\n\n## 占用字节大小\nencode()方法和len()函数\n> \"A\".encode('ASCII')  #使用ASCII编码方式编码\n> \"z\".encode('ASCII') \n> \"ABC\".encode('ASCII')\n> len( \"A\".encode('ASCII'))  #查看占用字节的大小\n> len( \"z\".encode('ASCII'))\n> len(\"ABC\".encode('ASCII')\n> \n> \"字\".encode('GBK')  #GBK编码方式\n> \"汉字\".encode('GBK')\n> len(\"字\".encode('GBK'))\n> len(\"汉字\".encode('GBK')) #查看GBK编码方式的大小\n> \n> \"A\".encode('UTF8')\n> \"汉\".encode('UTF8')   #UTF8编码方式\n> \"汉字\".encode(\"UTF8\")\n> \n> len(\"A\".encode('UTF8'))\n> len(\"汉\".encode('UTF8')) #UTF8编码汉字大小\n> len(\"汉字\".encode('UTF8'))\n\n\n\n"},{"title":"apt-get use","url":"/2018/04/03/apt-get-use/","content":"APT软件包管理器是Debian平台上的用于安装和删除软件包的命令行工具，通常简写为apt-get.\nDebian软件包管理器dpkg可用来维护、升级和安装自定义及第三方程序\n<!-- more -->\n# APT管理工具\n## 安装软件\n>apt-get install package_name -y\n## 更新\n> apt-get update\n## 升级\n> apt-get upgrade\n## 版本升级\n> apt-get dist-upgrade\n## 移除软件包\n> apt-get remove package_name\n## 自动移除\n> apt-get autoremove\n## 完全移除\n> apt-get purge package_name\n## 清理\n> apt-get clean\n## 自动清理\n> apt-get autoclean\n\n# Debian软件包管理器（dpkg）\n## 安装\n> dpkg -i package_deb.deb\n## 卸载\n> dpkg -r package_name.deb\n## 完全卸载\n> dpkg -P package_name.deb\n## 检查已安装软件包\n> dpkg -l package_name   #查看已安装或移除包的状态\n> dpkg -p package_name   #查看已安装软件包的详细信息\n\n# Tar命令\n顾名思义，tar命令起源于unix系统，它开始是把多个文件写入磁盘文档（Tap ARchive）\n\n## 创建压缩文件\n> cd dir_name && tar -cf dir_name*","categories":["Ubuntu16.04环境搭建"]},{"title":"python日常使用","url":"/2018/04/01/python/","content":"python的日常使用记录~\n<!-- more -->\n\n# requirements.txt文件\n查看python项目时，经常可以看到requirements.txt文件，该文件记录了该项目所使用的全部python依赖库及其精确的版本号。\n\nrequirements.txt文件可以通过pip命令自动生成和自动安装依赖\n\n## 生成requirements.txt文件\n\tpip freeze > requirements.txt\n\n## 安装requirements.txt依赖\n\tpip install -r requirements.txt\n","categories":["python"]},{"title":"R on ubuntu16.04","url":"/2018/04/01/R-on-ubuntu16-04/","content":"系统环境： ubuntu server 16.04 64 bit\n在windows上安装R和Rstudio较容易，下面谈谈如何在ubuntu16.04上安装R和Rstudio server\n<!-- more -->\n# 安装R\n可以直接使用如下命令安装R，但是软件源中的R版本较老，为了使用最新版R，我们自己添加R镜像源以获取最新版R\n>apt-get install r-base 或者 apt-get install r-base-core\n\n## 移除原来的R\n\tapt-get remove r-base\t#删除r-base软件包\n\tapt-get autoremove r-base*\n\n## 添加最快的镜像\n在R官网上找到离自己最快的镜像源，此处选择中科大的镜像\nhttps://mirrors.ustc.edu.cn/CRAN/\n\n> vi /etc/apt/sources.list   #编辑该文件，将下面镜像源添加到该文件\n> deb https://mirrors.ustc.edu.cn/CRAN/bin/linux/ubuntu xenial/\n\n## 安装R\n> apt-get update -y\n> apt-get install r-base -y\n### 如果报错，尝试运行如下命令\n> apt-get install r-base-core -y\n\n## 检查安装\n>  R --version  # 查看R的版本\n> R     #启动R,进入R的交互式shell\n## 安装R包\n> R #进入R\n> install.packages('txtplot')  #安装txtplot包\n\n# 安装Rstudio server版\n下面贴出官网教程、\n>https://www.rstudio.com/products/rstudio/download-server/\n\n> apt-get install gdebi-core -y\n> wget https://download2.rstudio.org/rstudio-server-1.1.442-amd64.deb\n> 如果网速过慢可以下载到本机再上传到服务器\n> gdebi rstudio-server-1.1.442-amd64.deb   #若报错可能是安装包损坏，请重新下载该文件\n\n## 下面是官方使用教程\n> https://support.rstudio.com/hc/en-us/articles/200552306-Getting-Started\n\n使用Rstudio server,浏览器访问下面的地址\n>http://server-ip:8787","categories":["R"]},{"title":"R-数据处理之重要函数的使用","url":"/2018/04/01/R-数据处理之重要函数的使用/","content":"R学习笔记4\n\n<!-- more -->\n\nR中处理循环： for/while语句，还有更为强大的一句话循环函数\n> 一句话循环 lapply apply mapply tapply\nR中排序\n> sort order\nR中总结数据信息\n> head tail summary str table xtabs ftable ...\n# lapply\n> 可以循环处理列表中的每一个元素\n> lapply(参数)： lapply(列表，函数/函数名,其他参数)\n> lapply总是返回一个列表\n\tstr(apply)  #str()把任意的R对象以一种整洁紧凑的方式展现出来\n\t\n\tx <- list(a=1:10,b=c(11,21,34,53,54)) #创建一个列表\n\tlapply(x,mean)\t\t\t\t#将列表中的两个元素分布求平均\n\t\n\tx <- 1:4\n\tlapply(x,runif)   #利用lapply将runif函数依次作用于x中的每一个元素\n\tlapply(x,runif,min=0,max=100) #min 和max对runif函数产生的值的范围进行了限制\n\tlapply(x,function(m) m[1,]) #编写自己的函数进行循环\n\t#此处函数为 function(m) m[1,] ,传入矩阵m，取出m中的第一行\n\t\n## sapply\n> sapply:简化结果\n> 当结果列表元素的长度均为一的时候，返回向量\n> 当结果列表元素长度相同且大于1的时候，返回矩阵\n》结果列表元素长度不同时，与lapply的结果相同\n\n# apply\n> 沿着数组的某一维度处理数据\n> apply(数组,维度,函数/函数名)\n\n\tx <- matrix(1:16,4,4)\n\tapply(x,2,mean)\t\t#对矩阵的第二个维度（列）求平均\n\tapply(x,2,sum)  #对每一列进行求和\n\tapply(x,2,mean)  #对每一列求平均\n\t\n\trowSums(x)\t#求行和\n\trowMeans(x)\t#求行平均\n\tcolMeans(x)\n\tcolSums(x)\t#求列和\n\n# mapply\n>lapply的多元版本\n>mapply(函数/函数名,数据，函数相关的参数)\n\n\tx <- list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))\n\ty <- mapply(rep,1:4,4:1)   #x列表 和y列表相同\n\t\n\ts <- function(n,mean,std)｛\t#()内为传入函数中的变量，花括号内为函数体\n\t\trnorm(n,mean,std)\n\t｝\n\ts(4,0,1)\t\t\t\t#运行函数\n\t\n\tmapply(s,1:5,5:1,2)  # mapply依次将参数传入s函数中进行处理\n\tlist(s(1,5,2),s(2,4,2),s(3,3,2),s(4,2,2),s(5,1,2))\n\n# tapply\n\n\tx <- c(rnorm(5),runif(5),rnorm(5,1)) #得到一个向量\n\tna.rm=TRUE    #去除缺失值\n# split\n> 根据因子或因子列表将向量或其他对象分组\n> 通常与lapply一起使用\n> split(向量/列表/数据框,因子/因子列表)\n\n# 排序\n> sort 对向量进行排序，返回拍好序的内容\n> order 返回拍好序的内容的下标，可以按照多个标准进行排序\n\tx <- data.frame(v1=1:5,v2=c(10,7,9,6,8),v3=11:15,v4=c(1,1,2,2,1))\n\tsort(x$v2)\t\t\t#对数据框中的v2升序排列\n\tsort(x$v2,decreasing=TRUE)  #对数据框中的v2降序排列\n\t\n\torder(x$v2)   #order函数返回的是排序数据的行号\n\tx[order(x$v2),] \t\t#对x按照v2排序\n\tx[order(x$v4,x$v2),]\t\t#按照v4主排序，v4值相同时按照v2排序\n\tx[order(x$v2,x$v4,decreasing=TRUE),]   #降序排序\n\n# 总结数据信息\n\n\thead(airquality)  #查看前6行\n\ttail(airquality)  #查看后6行\n\t\n\thead(airquality,10) #指定查看前10行\n\ttail(airquality,10)\t#指定查看后10行\n\n\tsummary(airquality)\t\t#总结airquality数据集信息\n\tstr(airquality)\n\ttable(airquality$Month)  #总结airquality数据集中的月份\n\t\n\tany(is.na(airquality))   #判断airquality数据集中是否包含空值\n\tsum(is.na(airquality))\t #求出airquality数据集中的缺失值个数\n\tall(airquality$Month<12)   #判断是否所有数据都满足括号内的条件\n\t\n\txtabs()   #交叉表\n\tftable(x) #使数据框扁平化展示出来\n\t\n\tobject.size(airquality)  #查看数据集大小，防止内存不足\n\tprint(object.size(airquality),units=\"Kb\") #将数据以Kb为单位显示\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["R"]},{"title":"R-操纵数据之构建子集(subsetting)","url":"/2018/04/01/R-操纵数据之构建子集/","content":"# R的学习笔记3\n\n<!-- more -->\n\nR处理数据过程中，拿到的为原始数据（raw dataset），需要对数据进行预处理得到预处理之后的数据（clean dataset）,这就涉及到提取元素构建子集\n\n# 构建子集的基本方法\n> [] 提取一个或多个类型相同的元素\n> [[]] 从列表或者数据框中提取元素\n> $ 按名字从列表或数据框中提取元素\n\tx <- 1:10\n\tx[1]  #取出第一个元素\n\tx[4:7] #取出第4到7的元素\n\t\n\tx[x>5] \t#取出满足一定条件的数据\n\tx[ x>3 & x<8 ]\n\tx[x<3 | x>7]\n\t\n\tx <- c(1,2,3,4)   #按照元素名获取元素值\n\tnames(x) <- c(\"a\",\"b\",\"c\",\"d\")\n\tx[\"b\"]\n\t\n# 矩阵的子集\n\tx <- matrix(1:6,nrow=2,ncol=3)\n\tx[1,2]\t\t#获取第一行第二列的元素\n\tx[2,3]\t#获取第二行第三列的元素\n\tx[1,]\t#获取第1行的所有数据\n\tx[,2]\t#获取第2列的所有数据\n\tx[2,c(1,3)]\t#获取第2行的1，3列的所有数据\n\t\n\tx[1,2,drop=FALSE]  #使返回值为矩阵而不是默认的向量\n\n# 数据框的子集\n\tx <- data.frame(v1=1:5,v2=6:10,v3=11:15)   #生成数据框\n\t\n\tx[2,]  # 类似矩阵的操作是可行的\n\tx[,3]\n\tx[1,4]\n\t\n\tx[,\"v2\"]  #使用列名提取整列\n\t\n\tx$v2[c(2,4)] #提取v2列中的2，4行元素\n\t\n\tx[(x$v1<4 & x$v2>=8),]  #使用逻辑判断提取特定值\n\t# 提取  v1列中值小于4并且v2列中值大于8的所有行，每一列都保留\n\t\n\twhich(x$v1>2)  #判断命令，返回下标\n\tx$v1>2\t\t#直接判断语句，返回逻辑值\n\t\n\tsubset(x,x$v1>2)  #构建满足条件的数据框\n\n# 列表的子集\n## 子集获取方法大体为所列的几种： [[]]   $  [[]][]  [[]][[]]\n\n\tl <- list(id=c(1,2,3,4),a=list(1,2,3,4),gender=c(\"male\",\"female\"))\n\t\n\tl[1]  #获取列表中的某个元素，包含元素名和元素值\n\tl['id']\n\t\n\tl[[1]] #获取列表中的某个元素，只获取其内容\n\tl[[\"id\"]]\n\tl$id\n\t\n\tl[c(1,3)] #获取列表中多个元素\n\t\n\t#获取嵌套元素的值（此处为列表中的列表）\n\tl[[c(2,3)]]   #获取l列表中第二个元素（a列表）中的第二个元素的值\n\tl[[c(3,1)]]\t  #获取l列表中第三个元素中的第一个元素的值\n\t\n\tl[[2]][[2]]\t  #获取l列表中第二个元素（a列表）中第二个元素的值\n\tl[[2]][2]\t#获取l列表中第二个元素（a列表）中第二个元素（包含属性和值）\n\n## 不完全匹配\n\tl2 <- list(amalf = 1:10)\n\t\n\tl2$amalf   #取出元素（包含元素和值）\n\tl2$a        #不输入全名也可以达到同样的效果\n\n\tl2[[\"a\"]]  #此处为不完全匹配的错误示范\n\tl2[[\"a\",exact=FALSE]] #不完全匹配的正确示范\n\n# 缺失值处理\n\tx <- c(1,NA,2,3,NA)\n\tis.na(x)   #判断缺失值\n\tx[is.na(x)]  #获取向量中的缺失值\n\tx[!is.na(x)] #获取向量中的非缺失值\n\t\n\tx <- c(1,NA,2,NA,3)\t\t#获取x y中对应位置都不是缺失值的值\n\ty <- c(\"a\",\"b\",NA,\"c\",NA)\n\tz <- complete.cases(x,y)  #x y对应位置没有缺失值时该位置为TRUE\n\tx[z]   #获取对应位置值\n\ty[z]\n\t\n\t# 处理数据集中的缺失值\n\tlibrary(datasets)   #导入数据集包，里面内置了许多数据集\n\thead(airquality)\t#查看airguality数据集头部（看一下数据集是怎样的）\n\tg <- complete.cases(airquality)\n\tairquality[g,][1:10,] #获取没有缺失值的那些行中的前十行，保留所有列\n\t\n# 向量化操作\n向量化操作是指对向量进行统一操作的过程\n\tx <- 1:5\n\ty <- 6:10\n\tx + y    #向量对应元素相加\n\tx*y    \t #向量对应元素相乘\n\tx/y\t   \t #向量对应元素相除\n\t\n\tm <- matrix(1:4,nrow=2,ncol=2)\t\t#创建两个矩阵\n\tn <- matrix(rep(2,4),nrow=2,ncol=2)  # rep(2,4)表示把2重复四次\n\tm*n   #矩阵对应元素相乘\n\tm %*% n # 线性代数矩阵乘法\n\t\n\t","categories":["R"]},{"title":"R 数据结构","url":"/2018/04/01/R-数据结构/","content":"# R的学习笔记2\n\n<!-- more -->\n# R的对象和属性\n\n## R的对象\n>数值型、整型、字符型、复数型、逻辑型\n\n变量名区分大小写\n\tx <- 3\t#原生的赋值方法\n\tx = 3   #此法也可，极端情况下会报错\n\tx <- TRUE\t#R中逻辑型一定要大写\n\tclass(x) #查看x的数值类型\n## 属性\n> 名称、维度、长度（length）、类型（class）\n\n# R中的向量（vector）\n> 向量只能包含同一类型的对象\n## 创建向量的三种方法\n\tx <- vector(\"character\",length(10))  #创建字符型，长度为10的空向量\n\tx1 <- 1:4\t#创建了1到4的整数型向量\n\tx2 <- c(1,2,3,4)\n\tx3 <- c('a','b','c','d')\t#利用c函数创建向量\n\tx4 <- c(TRUE,10,'A')\t#R会将不同类型的转换为同一类型，此处为字符型\n## 强制转换\n\tas.numeric()\t#强制转换为数值型\n\tas.logical()\t#强制转换为逻辑型\n\tas.character()\n## 属性操作\n\tclass(x) \t#查看变量x的类型\n\tnames(x) <- c('name1','name2','name3',)\t#为向量x中的每个元素命名\n\t\n# R中的矩阵和数组\n\n矩阵（Matrix）：只能有两个维度 行row和列column \n\n数组（array）：可以有多个维度，矩阵为数组的一种情况\n\n## 矩阵\n\tx <- matrix(nrow = 3, ncol = 2) # 创建一个三行两列的空矩阵\n\tx <- matrix(1:6,nrow=3,ncol=2)  #创建一个两行三列的空矩阵并赋值\n\tdim(x)\t#查看矩阵的维度属性\n\trbind(x1,y1)  #将x1 y1 两个矩阵进行行拼接\n\tcbind(x2,y2)  #将x2 y2 两个矩阵进行列拼接\n\tattributes(x) #查看矩阵的所有属性\n\n## 数组\n\ty <- array(1:24,dim=c(4,6))\t#创建一个二维数组，也就是矩阵\n\ty2 <- array(1:24,dim=c(2,3,4))\t#创建一个维度为三维的数组\n\n# R中的列表\n列表可以包含不同类型的元素，创建列表的方法为使用list()\n\tl <- list('a',2,10L,3+4i,TRUE)\t#创建列表\n\tl2 <- list(a=1,b=2,c=3)\t#为列表中每个元素命名\n\tx <- matrix(1:6,nrow=2,ncol=3) #创建一个矩阵\n\tdimnames <- list(c('a','b'),c('A','B','C'))   #为矩阵中的行和列命名\n\n# R中的因子（factor）\nR中的因子用来处理分类数据，区分有序和无序，可以理解为整数向量+标签（优于整数向量）\n\tf <- factor(c('female','male','male','female','male')) #创建因子\n\tf2 <- factor(c('female','male','male','female','male'),levels('male','female'))\n\t# 使用levels自定义极限水平\n\ttable(f)\t#查看对f因子的整体描述\n\tunclass(f)\t#去掉f的属性\n\tclass(unclass(f2))\t# 查看去除属性后因子的属性\n\n# R中的缺失值\nR中的缺失值有两种NA和NaN\n\nNaN属于NA，而NA不属于NaN,NaN常用于判断整数缺失值，而NA使用的范围更广，可以表示多种缺失值，有不同的类型属性\n\n可以使用is.na() is.nan()来判断是否为该类型的缺失值\n\tx <- c(1,2,3,na,na,4)\n\tis.na(x)\n\tis.nan(x)\n\t\n\ty <- c(1,2,3,nan,nan,5)\n\tis.na(y)\n\tis.nan(y)\n\n# R中的数据框（data frame）\nR中的数据框和数据库中的一张表很像，就是数据表，每个元素代表一列数据，元素类型可以不同\n\td <- data.frame(id=(1,2,3,4),name=c(\"a\",\"b\",\"c\",\"d\"),gender=c('male',\"female\",\"male\",\"female\")\n\t\n\tnrow(d) #查看d的行数\n\tncol(d) #查看d的列数\n\tdata.matrix(dd) #特殊情况下可强制转换为矩阵，前提为数据框中dd中所有元素类型相同\t\n\n# R中的时间与日期\n\n## 日期：Date\n\tx <- date()\t\t\t\t# 读入时间\n\tx2 <- Sys.Date()\t\t#读入系统时间\n\tx3 <- as.Date(\"2017-3-18\") \t#存入某一时间，格式为  年-月-日\n\tweekdays(x3)\t# 查看x3对应的星期是什么\n\tmonths(x2)\t\t#查看该时间所属月份\n\tquarters(x3)\t#查看该时间所属的季度，一年共有四个季度\n\tjulian(x3)\t\t#查看该时间距离1979-01-01过去多少天，转换为一个整数\n\t\n\tx4 <- as.Date('2016-01-01')\n\tx5 <- as.Date('2017-01-01')\n\tx5-x4    #日期运算，查看两者相距的天数\n\tas.numeric(x5-x4)  #转换为整数\n## 时间\nR中的时间有两种类型（POSIXct、POSIXlt）\n\tt <- Sys.time()   #读入系统时间\n\tclass(t)\t#查看时间类型\n\t\n\tas.POSIXlt(t) #强制类型转换\n\tas.POSIXct(t) \n\tunclass(t)\t#留下内容去除属性\n\t\n\tnames(unclass(t))\t#查看属性名\n\tt$name1\t\t#取出上一命令中某个名字的具体值\n\t\n\tstrptime(x1,\"%B% %d, %Y %H:%M\")  # 读取时间，x1为时间日期字符串，后面%B月份 %d天数 %Y年份 %H小时 %M分钟\n\t","categories":["R"]},{"title":"R learning","url":"/2018/03/31/R-learning/","content":"# R语言的学习笔记1\n\n<!-- more -->\n\n# R和R studio的安装\n> https://cran.r-project.org  #R语言的官网\n> https://www.rstudio.com\t#R studio的官网，分为desktop版和server版本\n\n# R中的包\nR中的包集成了众多函数，是对R基本功能的拓展\n## 获取来源： CRAN/Bioconductor/GitHub等\n\tinstall.package() #安装CRAN中的包，括号内填入包名\n\tinstall_github()  #安装github中的包\n\tupdate.packages() #windows下升级R但无需重装packages\n\t\n## 使用包\n\tlibrary()\t#首先使用该命令导入包\n\tmethods(foo) #获取R命令的源码\n\n## 常用包\n\tforeign包，可以读取 Minitab, S, SAS, SPSS, Stata, Systat,dBase保存的数据\n\t\n# R中获取帮助\n\n\tdata()   # 查看自带的数据集\n\t?+数据集名称  #查看该数据集的详细说明\n\t?+函数名\t  #查看R有关该函数的帮助文档\n\t#  #R中也使用#注释\n\n# 如何在社区中问问题\n\n常用的解决问题社区 Google/Stackoverflow\n> Win7 64bit R3.2.0  Im()   \"seg fault on large data frame\"\n> 操作系统  R版本  出错函数  错误信息  预期结果\n\n# 发布自己的成果\n\n1、github\n\n2、RPubs:  rpubs.com\n","categories":["R"]},{"title":"Ubuntu上的pip2和pip3","url":"/2018/03/31/Ubuntu上的pip2和pip3/","content":"在Ubuntu上如何使python2 和 python3 和谐共处~\n<!-- more -->\n\n20180723更新：最好的办法是安装anaconda创建虚拟环境，使用conda来安装管理Python包，这样可以避免下面的麻烦。\n\n# 各版本启动命令\n> python   #启动python2\n> python3  #启动python3\n\n>pip2 -V   #查看pip2版本\n>pip  -V   #查看pip默认版本为2还是3\n\n# 安装pip3\n\n## 方法1：\n> sudo apt install python3-pip -y #安装pip3\n>\n> sudo apt install python-pip -y #安装pip2，使用pip2 -V查看\n>\n> pip3 install --upgrade pip  %更新pip3\n> pip3 -V %查看python3 pip版本\n> pip -V  %查看python2 pip版本\n\n> pip install --upgrade pip #更新pip\n\n## 方法2：\n进入官网https://pip.pypa.io/en/stable/installing/  下载get-pip.py文件\n\n> python3 get-pip.py   #安装pip3","categories":["linux"]},{"title":"Matlab图像处理之大米计数","url":"/2018/03/30/Matlab图像处理之大米计数/","content":"Matlab中内置了rice.png图片用于图像处理，今天希望编程实现自动获取图片中大米的个数\n<!-- more -->\n# 算法思想\n\n  首先提取大米的边界，然后利用提取的边界对闭合边界进行填充，对图像进行开运算，将图片四周不完整的大米去除，\n之后进行二值化，大米像素值赋值为255，其他区域值为0。并利用for循环遍历所有像素点，若找到大米像素点，则计数器加一，并调用子函数M_search函数通过递归遍历大米的全部像素点，将其标记为另一值，避免对同一大米重复计数。\n\n# 下面为主程序Matlab代码\n\t% Count the rices number in the rice picture\n\tfunction R_num=RiceImage\n\tclear;clc;\n\tI = imread('rice.png');  %读入matlab内置的rice图片\n\t[m,n] = size(I);\n\t\n\t%%此代码块借用了CDSN江南烟雨中博客提供的算法\n\tJ = edge(I,'canny');    %提取大米的边界\n\t%figure(1),imshow(J);\n\tK = imfill(J,'holes');  %提取大米边界后对闭合边界进行填充\n\t%figure(2),imshow(K);\n\tSE = strel('disk',3);\n\tL = imopen(K,SE);       %对图像进行开运算，将图片四周不完整的大米去除\n\t%figure(3),imshow(L);   %周围不完整的大米都已经被去除\n\tL = uint8(L);\n\tL = 255*L;    % 将大米的像素点的值赋为255\n\t\n\t%此代码块为自己实现的算法\n\tnum = 255;    %开始循环，对大米进行计数\n\tflag=0;  %计数\n\tfor i = 1:m\n\t\tfor j = 1:n\n\t\t\tif L(i,j)==num\n\t\t\t\tflag=flag+1;\n\t\t\t\tL=M_search(L,i,j,m,n,num);      %调用递归函数M_search，每找到一个大米，该函数便将该大米所占的所有像素点置为1\n\t\t\tend\n\t\tend\n\tend\n\tR_num=flag;    %图片中的大米个数\n\n# 子函数M_search\n\n\t%大米的像素点值为255，该算法通过递归的思想自动搜索一个大米的所有像素点，并将大米像素点置为另一值\n\tfunction Y = M_search(Matrix,row,column,rows_limit,columns_limit,number)\n\t%输入矩阵，行数，列数，行数限制和列数限制和大米的像素值\n\tY = Matrix;\n\tif row<rows_limit && column<columns_limit && row>=1 && column>=1\n\t\t if Matrix(row,column)==number  %判断是否为大米的像素点\n\t\t\t Matrix(row,column)=2;\n\t\t\t Y = Matrix;\n\t\t\t Y = M_search(Y,row+1,column,rows_limit,columns_limit,number);  %搜索下像素点\n\t\t\t Y = M_search(Y,row-1,column,rows_limit,columns_limit,number);  %搜索上像素点\n\t\t\t Y = M_search(Y,row,column+1,rows_limit,columns_limit,number);  %搜索右像素点\n\t\t\t Y = M_search(Y,row,column-1,rows_limit,columns_limit,number);  %搜索左像素点\n\t %   disp('Work fine');\n\t\t end\n\tend\n\n# 运行\n下载主程序代码和子程序代码到同一文件夹，并该文件夹设为当前工作文件夹，直接运行主程序即可，在MatlabR2014a上运行无误，结果为68\n\n# 结果分析\n对大米图像进行手工计数后发现大米的真实数量为70，但是由于大米之间有两处粘连，粘连处会使算法将两粒大米识别为一粒，因此少算了两粒，后期考虑采用剥皮法对大米进行处理，以减少大米之间的粘连，提高结果的准确度\n\n\n# 参考\nCSDN江南烟雨的博客，原文地址如下：\nhttps://blog.csdn.net/xiajun07061225/article/details/6909591\n","categories":["Matlab"]},{"title":"Shell 之爬取图片","url":"/2018/03/29/Shell 之爬取图片/","content":"系统： ubuntu16.04 64bit\nBash shell 之 自动下载数字图像处理配套图片资源并解压缩\n\n<!-- more -->\n\n\n# 自动下载各个章节的图片\n    #!/bin/bash\n    #This is a shell script for downloading the Images for a book\n    #Author:liushang\n    mkdir /root/Images\n    cd /root/Images\n    yum install -y zip unzip\n    apt-get install -y zip unzip      #Install software\n    for((i=1;i<=12;i++));\n    do   \n    \t# download zip files\n    \tif [ $i -lt 10 ]\n    \t\tthen wget \"http://www.imageprocessingplace.com/downloads_V3/dip3e_downloads/dip3e_book_images/DIP3E_CH0`echo $i`_Original_Images.zip\"\n    \t\tunzip \"DIP3E_CH0`echo $i`_Original_Images.zip\"\n    \telse\n    \t\twget \"http://www.imageprocessingplace.com/downloads_V3/dip3e_downloads/dip3e_book_images/DIP3E_CH`echo $i`_Original_Images.zip\"\n    \t\tunzip \"DIP3E_CH`echo $i`_Original_Images.zip\"\n    \tfi\n    done\n    cd /root/Images && rm -rf DIP*.zip   \t  #删除zip压缩文件\n    cd /root/ && zip -r Images.zip Images   #压缩下载下来的图片的文件\n    \n    echo \"All Images have been downloaded~ enjoy~\"\n","categories":["Bash Shell"]},{"title":"Matlab","url":"/2018/03/29/Matlab/","content":"近日重新开始使用Matlab，在此记录一下日常使用matlab的一些心得\n\n<!-- more -->\n\n# 快捷键\n> ctrl + insert   # matlab doc中复制的快捷键\n> ctrl + s    # 保存修改的快捷键\n","categories":["Matlab"]},{"title":"VMware tools","url":"/2018/03/29/VMware-tools/","content":"在VMware 12上安装linux系统后，显示框太小，为了使显示正常，需要为虚拟机系统安装vm-tools\n<!-- more -->\n\n# 开始安装\n\n1、打开虚拟机\n2、在菜单栏虚拟机栏下找到安装VM tools栏并点击\n3、按照虚拟机框内的提示操作\n4、装载光盘\n> mount /dev/cdrom   /mnt/cdrom   #cdrom若不存在则创建该目录\n> cd /mnt/cdrom   #切换到该目录工作\n> cd /media/      # 可选项，可进入此查看DVD是否被自动挂载到此\n\n5、进入挂载光盘目录后\n>  cp /mnt/cdrom/*   /usr/local/VM   # 将光盘内的内容拷贝出来操作，避免只读权限导致解压失败\n>  cd VM\n> tar -zxvf   vmtools.tar.gz     # 解压出里面的压缩包\n> cd vmware-tools-distrib/    # 进入解压目录\n> bash ./vmware-install.pl\n\n\n# 下面给出Ubuntu server官方安装教程\n## 仅有命令行界面的 Ubuntu Server\n\n转到虚拟机 > 安装 VMware Tools（或 VM > 安装 VMware Tools）。\n\n注意：如果您运行的是轻量版的 Fusion、不带 VMware Tools 的 Workstation 版本或 VMware Player，则系统会提示您先下载 Tools，然后才能安装它们。此时请单击立即下载开始进行下载。\n\n## 在 Ubuntu 客户机中，运行以下命令：\n\n运行如下命令以创建一个挂载 CD-ROM 的目录：\n\nsudo mkdir /mnt/cdrom\n\n当系统提示输入密码时，请输入 Ubuntu 管理员用户密码。\n\n注意：出于安全考虑，所键入的密码不会显示出来。在接下来的五分钟内您无需重新输入您的密码。\n\n运行如下命令以挂载 CD-ROM：\n\n>sudo mount /dev/cdrom /mnt/cdrom 或 sudo mount /dev/sr0 /mnt/cdrom\n\nVMware Tools 捆绑包的文件名因您的 VMware 产品版本而异。运行如下命令可查找确切的名称：\n\n> ls /mnt/cdrom\n\n运行如下命令以解压 VMwwre Tools 捆绑包文件：\n\n> tar xzvf /mnt/cdrom/VMwareTools-x.x.x-xxxx.tar.gz -C /tmp/\n\n注意：x.x.x-xxxx 是在上一步中查明的版本。\n\n运行如下命令以将目录更改到 VMware Tools 分发包：\n\n> cd /tmp/vmware-tools-distrib/\n\n运行如下命令以安装 VMware Tools:\n\n> sudo ./vmware-install.pl -d\n\n注意：-d 假定您希望接受默认设置。如果不使用 -d，请按 Return 接受各个默认值或提供您自己的答案。\n\n安装完成后运行下面的命令重新启动虚拟机：\n\nsudo reboot\n"},{"title":"Install LMD","url":"/2018/03/27/Install-LMD/","content":"在Ubuntu16.04 64bit上安装LMD软件\nLMD软件包名maldetect，是R-fx Networks研发的一款流行且复杂的Linux Marware Detect（Linux上的恶意软件包查杀工具），安装该软件包能减少linux遭受的恶意软件的威胁，下面记录一下如何源码编译安装LMD软件包\n<!-- more -->\n\n# 从官网下载最新源码包\n使用搜索引擎搜索官网，然后找到下载地址下载\n> wget http://www.rfxn.com/downloads/maldetect-current.tar.gz -O lmd.tar.gz   # 下载源码包并重命名为lmd.tar.gz\n\n# 编译安装\n> tar -zxvf lmd.tar.gz -C /usr/local/\n> cd /usr/local/\n> cd maldetect*          #进入软件源码目录\n> bash ./install.sh      #开始安装\n\n没有报错且提示安装成功即完成~\n","categories":["linux"]},{"title":"Install nginx On Ubuntu16.04","url":"/2018/03/26/Install-nginx-On-Ubuntu16-04/","content":"Ubuntu16.04自带nginx，一般可直接通过apt-get 命令安装，为了获取最新版nginx，也为了获得最佳nginx性能，采用nginx源码安装的方式对nginx进行编译安装，将过程记录如下：\n系统环境为Ubuntu16.04 64bit\n<!-- more -->\n\n# 配置编译环境安装依赖包\n> apt-get install -y build-essential # 安装编译环境\n> apt-get install -y libtool libpcre3 libpcre3-dev zlib1g-dev openssl libxml2-dev libpng12-dev libfreetype6-dev libjpeg-dev libssl-dev openssl libcurl4-openssl-dev   #安装依赖包\n\n# 下载nginx源码\n搜索nginx源码下载，进入nginx官网下载最新稳定版nginx源码\n>  wget http://nginx.org/download/nginx-1.12.2.tar.gz  #下载源码\n> tar -zxvf nginx-1.12.2.tar.gz   #解压源码包\n\n# 编译nginx源码\n> cd nginx-1.12.2.tar.gz     #切换到解压文件夹中\n> ./configure --prefix=/usr/local/nginx --with-http_ssl_module  #配置安装路径并开启https支持\n> make && make install     # 开始安装\n\n# nginx启动\n> /usr/local/nginx/sbin/nginx\n> /usr/local/nginx/sbin/nginx -v #查看版本\n","categories":["linux"]},{"title":"Shell之批量下载历年数学建模题","url":"/2018/03/25/Shell之批量下载历年数学建模题/","content":"自动下载历年数学建模试题~系统Ubuntu16.04 64bit\n\n<!-- more -->\n\n#下载代码如下\n\n​    #!/bin/bash\n    #This is a shell script for downloading the doc of Math Competition\n    #Author:liushang\n\n    cd /root/m &&\n    apt-get install -y zip unzip p7zip &&\n    type=\"a b c d\"\n    for((year=2000;year<=2016;year++));\n    do\n            for t in $type\n            do\n            # download zip files\n                    doc=$year$t &&\n            wget -c \"http://www.shumo.com/wiki/lib/exe/fetch.php?media=cumcm:cumcm`echo $doc`.zip\" -O \"Problem$doc.zip\"\n                     unzip \"Problem$doc.zip\"   #如需解压zip文件，请取消注释\n            # download 7z files\n            wget -c \"http://www.shumo.com/wiki/lib/exe/fetch.php?media=cumcm:cumcm`echo $doc`.7z\" -O \"Problem$doc.7z\"\n            # year=$[$year+1]   It should be like this if in this way\n                     7z x \"Problem$doc.7z\"     #如需解压7z文件，请取消本行注释\n            done\n    done\n    echo \"All files have been downloaded~ enjoy~\"\n","categories":["Bash Shell"]},{"title":"hosts屏蔽","url":"/2018/03/23/host屏蔽/","content":"\n\n\n# hosts屏蔽\n\n\n\n在自己电脑上安装了一些破解软件，需要使用本机host文件屏蔽软件联网激活，然而挂酸酸乳时候，如果选择了全局模式，会使得本地的DNS解析被直接绕过，导致软件激活失败，或者激活成功后又失败。在此记录下一些常用破解软件需要的屏蔽的host.\n\n\n\n在修改host前建议先备份host文件\n\n### 一、hosts文件位置\n\n```\nWindows | C:\\Windows\\System32\\drivers\\etc\\hosts\nMac | /Private/etc/hosts\nLinux | /etc/hosts\n```\n\nlinux 下host原文件备份：\n\n```\n127.0.0.1\tlocalhost\n127.0.1.1\tlyz-PC\n\n# The following lines are desirable for IPv6 capable hosts\n::1     ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n```\n\n### 二、破解软件hosts\n\n在这里记下一些常用软件破解需要的hosts记录，在vps上一并写入进行屏蔽,保证即使不小心使用了全局代理也不会使得软件联网。\n\n```\n# sublime_text3_3176_build\n127.0.0.1       www.sublimetext.com\n127.0.0.1       license.sublimehq.com\n127.0.0.1 sublimetext.com\n127.0.0.1 sublimehq.com\n```\n\n\n\n"},{"title":"Install Git On CentOS7","url":"/2018/03/23/Install-Git-On-CentOS7/","content":"虽然CentOS提供了yum安装git的方式，然而为了能够使用最新版git我们最好下载源码在本地进行编译安装\n<!-- more -->\n\n# 安装预编译环境\n> yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel -y\n\n# 下载源码包并解压\n> cd ~\n> wget git下载链接  #下载源码包\n> tar -zxvf  git.tar.gz    #解压源码包，将解压对象替换成对应包名\n> cd git       #查看解压后生成的文件夹并进入\n\n# 开始编译安装\n> cd git   #进入解压缩后的文件夹\n> make prefix=/usr/local all\n> make prefix=/usr/local install\n\n## 报错\n> /usr/bin/perl Makefile.PL PREFIX='/usr/local' INSTALL_BASE='' --localedir='/usr/local/share/locale'\nBEGIN failed--compilation aborted at Makefile.PL line 3.\n　　make[1]: *** [perl.mak] Error 2\n　　make: *** [perl/perl.mak] Error 2\n\n## 解决\n安装相应的perl包\n> yum install perl-ExtUtils-MakeMaker package -y\n> make prefix=/usr/local all && make prefix=/usr/local install  #重新编译安装\n> git --version     #查看git版本\n","categories":["CentOS7环境搭建"]},{"title":"Install nodejs On CentOS7","url":"/2018/03/22/Install-nodejs-On-CentOS7/","content":"系统环境： CentOS7 64bit\n从官网下载最新源码包，然后编译安装\n<!-- more -->\n\n# 编译准备\n> yum -y update\n> yum install gcc gcc-c++ -y  #安装编译器\n\n# 从官网下载最新源码包\n> https://nodejs.org/en/download/\n> wget nodejs下载链接   #下载源码包\n> tar -zxvf nodejs.tar.gz\n> mv nodejs文件夹  /usr/local/nodejs文件夹\n> cd /usr/local/nodejs文件夹\n\n# 开始编译安装\n> ./configure  #注意切换到nodejs文件夹操作\n> make && make install\n> node -v     #验证版本\n","categories":["linux"]},{"title":"Install Go On CentOS7","url":"/2018/03/22/Install-Go-On-CentOS7/","content":"在CentOS7 64bit上安装golang,流程和安装JDK是一样的，下载安装包，解压到指定安装目录，配置安装路径即可\n\n<!-- more -->\n# 下载Linux安装包\n\n访问 https://golang.org/dl/ 网站下载相应安装文件\n> wget golang下载链接\n> tar -zxvf go.tar.gz  #解压安装包，具体文件名按实际而定\n> mv go /usr/local     #将解压后的文件放入 /usr/local/文件夹\n\n# 配置go安装路径\n> export PATH=$PATH:/usr/local/go/bin   #配置path环境变量\n> source /etc/profile    #使配置立即生效\n> go version        # 查看go的版本\n","categories":["CentOS7环境搭建"]},{"title":"Install JDK10 On CentOS7","url":"/2018/03/21/Install-JDK10-On-CentOS7/","content":"\n# 在CentOS7 64bit上安装JDK10\n\nlinux上安装Java十分简单,无需编译，只需从oracle官网下载相应的安装文件，解压到指定安装目录，然后配置path环境变量即可\n\n<!-- more -->\n\n## 下载JDK\n进入Oracle官网，同意条件，点击下载，然后在下载页面复制下载链接\n> wget JDK10下载链接 #下载安装包，链接从官网获取\n\n## 安装JDK10\n> ls  #查看下载文件\n> mv jdk-10-bin.tar.gz /usr/local/jdk-10-bin.tar.gz  #移动文件到安装目录 /usr/local/\n> cd /usr/local/        \n> tar -zxvf jdk-10-bin.tar.gz         # 解压后会生成解压目录\n\n## 配置\n> export JAVE_HOME=/usr/local/jdk-10    # 在此填上JDK安装路径即可\n> export PATH=$JAVA_HOME/bin:$PATH\n> source /etc/profile  # 使配置立即生效\n> java -version     # 查看java的版本，看到java的版本则安装成功\n","tags":["linux"],"categories":["linux"]},{"title":"清理磁盘驱动器图标","url":"/2018/03/15/清理磁盘驱动器图标/","content":"安装百度网盘、腾讯视频两个软件之后，软件会自动在我的电脑磁盘驱动器下面显示图标\n\n卸载腾讯视频后腾讯视频图标没有自动被删除，这就很闹心了，毕竟抬头不见低头见的东西\n\n不但丑还一无是处，嫌弃~\n\n<!-- more -->\n\n记录下如何清理流氓软件自动为自己添加磁盘驱动器图标\n\n# 打开注册表\n按win + R 快捷键呼出运行框，输入regedit并回车\n\n# 清除注册表中键值\n> 打开HKEY_CURRENT_USER>>SOFTWARE>>Microsoft>>Windows>>CurrentVersion>>Explorer>>MyComputer>>NameSpace\n\n将Namespace下的所有项目清空~\n\n世界清静了~\n"},{"title":"在win10上安装并激活MathType","url":"/2018/03/15/Install-MathType-On-Win10/","content":"\nMathType是知名的为office办公套件提供公式编辑的软件，但是其为收费软件\n\n在此记录下MathType的安装过程，个人偏爱较为纯净的英文原版软件，需中文版软件请绕道~\n\n软件： MathType-win-en-6.9d（英文原版软件）\n博主测试系统： Windows 10 专业版 （64bit）\n\n其他系统应该也能装~自己试试吧~\n\n<!-- more -->  \n\n# 一、软件下载安装\n\n以下下载方式选择其一即可，如不放心百度云资源请选择官网下载\n\n## 官网下载：\n> http://www.dessci.com/en/products/mathtype/\n\n## 百度云下载\n> 链接：https://pan.baidu.com/s/1UxORrtNuhZVGU_f5dqVqWA 密码：lwdz\n\n下载完成后正常默认安装即可，提示激活时选择30天试用即可\n\n# 软件激活\n\n在此直接使用注册码激活（无需注册机等，安全可靠）\n\n安装完成后打开MathType，在软件工具栏help中找到 Unlock/Register\n\n其他项随便填，product key一项填入下面激活码其中之一：\n\n> 序列号：\n\n> MTWE691-011016-c8xn5\n\n> MTWE691-011772-stfe9\n\n> MTWE691-011876-qf14d\n\n> MTWE691-011704-e3fyr\n\n> MTWE691-011152-33007\n","tags":["software"]},{"title":"Install python3 on CentOS7","url":"/2018/03/13/Install-python3-on-CentOS7/","content":"\n1.首先安装所需要的依赖环境（别管用到用不到，装就对了！）\n\n> yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel\n\n<!-- more -->\n\n2.下载最新的python Python官方网站下载 我这里最新版是python 3.6.4\n\n> wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz\n\n3.解压下载的压缩文件，并且进入解压后的目录\n\n> tar -zxvf Python-3.6.4.tgz\n> cd Python-3.6.4\n\n4.创建Python3的安装目录\n\n> mkdir /usr/local/python3\n\n5.开始编译安装python3\n\n> ./configure --prefix=/usr/local/python3\n> make && make install\n\n6.创建python3和pip3的软连接\n\n> ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n> ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3\n\n7.测试安装后的python3和pip3命令\n\n> Python 3.6.4\n> pip3 -V\n\n到此python3就单独安装完成了，也不影响系统内置的python2环境\n可是系统中并没有python3环境，有些软件需要运行在python3环境中，\n这时候我们就需要创建一个虚拟的python3环境了\n创建虚拟环境很简单，运行以下命令即可\n\n> cd /opt\n> python3 -m venv py3\n\n此时虚拟环境已经安装好了\n虚拟环境使用方法：\n进入虚拟环境\n\n> source /opt/py3/bin/activate 或者\n> . /opt/py3/bin/activate\n\n如需退出虚拟环境，使用deactivate命令即可。\n好了，centos7中python3的虚拟环境搭建完成！\n\n8.安装ipython(官网教程)\n\nInstall Howto\n\n    Download the latest epel-release rpm from\n    \n    http://dl.fedoraproject.org/pub/epel/7/x86_64/\n    \n    Install epel-release rpm:\n    \n    # rpm -Uvh epel-release*rpm\n    \n    Install python-ipython rpm package:\n    \n    # yum install python-ipython\n","tags":["linux"],"categories":["python"]},{"title":"centOS 7 python2 安装pip和matplotlib","url":"/2018/03/13/centOS-7-python2-安装pip和matplotlib/","content":" 系统环境：centOS 7 64位\n\n# python2安装pip\n> mkdir ~/pip && cd ~/pip &&\n> wget -P ~/pip https://pypi.python.org/packages/source/p/pip/pip-6.1.1.tar.gz &&\n> tar -xzf pip-6.1.1.tar.gz &&\n> cd pip-6.1.1 &&\n> python setup.py install &&\n> pip install --upgrade pip\n\n# python2 安装 安装pip和matplotlib\n> pip install matplotlib\n\n<!-- more -->"},{"title":"CentOS 7 yum 源问题解决","url":"/2018/03/13/CentOS-7-yum-源问题解决/","content":"今日配置自己的服务器的python环境，系统为centOS 7, 在网上找到教程，谁知在使用\n> yum -y install epel-release\n\n命令后，yum源无法使用，报错如下：\n> File /var/cache/yum/x86_64/7/epel/metalink.xml does not exist\n\n在网上寻找许久终于找到解决之道，记录如下：\n> yum remove epel-release -y\n> yum update -y\n\n<!-- more -->","categories":["CentOS7环境搭建"]},{"title":"cmd命令","url":"/2018/03/11/cmd脚本/","content":"\n# 批处理中，修改环境变量，永久有效\n\n更改path环境变量值,新增e:\\tools\nwmic ENVIRONMENT where \"name='path' and username='<system>'\" set VariableValue=\"%path%;e:\\tools\"\n"},{"title":"搭建LaTex环境及中文支持问题解决方法","url":"/2018/03/11/搭建LaTex环境及中文支持问题解决方法/","content":"** 前言: ** 近日流觞君学习号称最优秀的公式排版系统LaTex，冰淇淋小姐知悉后大加赞赏。在流觞君的鼓动下，冰淇淋小姐决心与流觞君一道入此大坑。然在环境的搭建及中文编码问题上遇坑颇多，念及冰淇淋小姐向来对环境搭建大为头疼，且网上教程对环境搭建大多不屑一提，对中文支持问题的解决之法又未有细说，故作此教程一篇，希望聪明的冰淇淋小姐能够按图索骥，在学习LaTex的道路上迈出坚实的一步。\n\n<!-- more -->\n\n写的很细致，是因为万事开头难，希望初学LaTex，安装LaTex环境的小伙伴们能够减少学习路上的磕磕绊绊，迈出坚实的第一步，对于教程中涉及的诸多概念，第一次不必懂，你的疑惑在学习LaTex的过程中自会一一解答。\n\n** 本文内容: **\n1、在win10上搭建并不复杂的LaTex环境\n2、安装一款顺手顺心的LaTex编辑器\n3、解决LaTex令人头疼的中文乱码问题\n\n# 一、在win10上搭建LaTex环境\n\n## **简介：**\nLaTex是当今公认的最优秀的排版系统，其对数学公式的优美排版、对论文、书籍、报纸排版的良好支持，使其得到广大用户的青睐与认可。相传上个世纪七十年代末，米国某计算机大佬因不满其得意之作的糟糕排版，遂作此系统。几十年的发展，LaTex功能愈发强大，性能愈发稳定，十分适合对科技类论文书籍的排版。流觞君和冰淇淋小姐作为两枚纯正的工科生，遂学之。\n\n如果你有接触过linux系统，一定知道linux下有许多发行版，类似ubuntu、redhat、centOS等。LeTex和linux系统一样，也有许多发行版，如MikTex、Ctex、Texlive等，令人眼花缭乱，不知作何选择。流觞君当然不会让超高智商的冰淇淋小姐陷入此烦心问题之中啦，接下来，按照流觞君的步骤一步步安装MikTex就好。什么？聪明的冰淇淋小姐想知道原因？好吧。Ctex项目早已于16年停止更新，况且其只不过是将MikTex和诸多编辑器打包，而Texlive则动辄好几G臃肿不堪，对于我等工科生，MikTex实为上上之选。\n\n**废话少说，下面开始LaTex环境的安装。**\n\n不行不行，我这里还有一句话非在安装前说不可，由于LaTex的创造者为米国人，因此原生不支持中文，所以在下面的安装步骤中，安装路径中一定不要出现中文，不然以后出现的各种问题够你喝几壶。嗯……冰淇淋小姐看到这估计是一脸懵逼的，什么是安装路径？啊哈，一两句话也解释不清，还是按照流觞君下面的教程一步步来吧。\n\n<style>\nimg{\n    width: 70%;\n\theight: 70%;\n    padding-left: 10%;\n}\n</style>\n\n## 1.1、百度搜索latex，第一个结果就是啦，我们点进去看看。\n![](/imgs/latex/l1.png)\n\n## 1.2、嗯~什么鬼，一堆英文?\n呵呵，我们的冰淇淋小姐看到这里一定要傻眼了，说好的下载嘞？在哪儿？莫急，请看红框框圈起来的get，我们点进去\n![](/imgs/latex/l2.png)\n\n## 1.3 打开get页面。\n嗯？在哪儿，还是没看到呀。呵呵，请看流觞君图片中箭头所指，我们在Tex Distributions栏找到Windows模块，点击MikTex，如下图所示。\n![](/imgs/latex/l3.png)\n\n## 1.4 我们来到了MikTex项目的主页。\n嗯？不是应该有一个类似软件下载的按钮嘛？在哪儿？莫急莫急，我们马上就找到MikTex这个家伙啦。这个家伙藏得再深，为了冰淇淋小姐，流觞君也会把他揪出来滴。接下来我们点击Download栏，如图：\n![](/imgs/latex/l4.png)\n\n## 1.5 好的我们终于找到啦。\n各位小伙伴请认准自己的系统，按照对应版本下载。冰淇淋小姐的是win10 64位，直接点击下载就好啦。\n![](/imgs/latex/l5.png)\n\n## 1.6 好的我们下载好了安装包，直接双击打开安装包。\n选择同意版权说明\n![](/imgs/latex/l6.png)\n\n## 1.7 然后到了为系统用户设置权限一项，我们选择为当前电脑所有用户安装该软件，然后下一步即可\n![](/imgs/latex/l7.png)\n\n## 1.8接下来小伙伴们可看仔细啦，冰淇淋小姐也注意啦!\n接下来我们前面讲过的安装路径就出现了，就是下面红色框框内的那一串啦，请检查是否有汉字，如果有，请点击右边的Browse键选择不包含中文的文件夹，下面是错误示范和正确示范，确定没有中文只有英文后就可以点击下一步了\n![](/imgs/latex/l8.png)\n![](/imgs/latex/l9.png)\n\n## 1.9到了设置页面，其余的默认就好.\n将Install missing package这项选择为yes，我们后面要用它来解决latex中的中文乱码问题，当然这一步选择ask me first 也是没问题的。为了给冰淇淋小姐以后使用LaTex减少trouble，流觞君推荐冰淇淋小姐现在最好选择yes。然后选择下一步\n![](/imgs/latex/l10.png)\n\n## 1.10 后面就开始软件安装啦，静静等待MikTex安装好即可。\n后面的几步，流觞君就不赘述啦，聪明的冰淇淋小姐到时候嫌弃本君太罗嗦那就不好啦。\n\n\n# 二、选择一款称心顺手的编辑器-----TeXstudio\n\nLatex下的编辑器有很多，安装好MikTex后就自带了TeXworks编辑器。然而按流觞君的亲身体验来说，TeXworks使用还是不太方便的，经常会出现一些问题，一些高级功能如自动补全，语法提示也没有。Windows平台下很多人用WinEdt，但是这个软件是收费的。本着给冰淇淋小姐写代码尽量减少麻烦的原则，经流觞君的亲身体会，在此推荐一款开源免费，轻量小巧而功能强大的LaTex编辑器TeXstudio。\n\n## 2.1 百度搜索TeXstudio，我们选择第一个结果就好\n![](/imgs/latex/l11.png)\n\n## 2.2 打开第一个搜索结果。\n哈哈~我们遇到一个耿直boy呢。TeXstudio没有为难我们，打开页面就出现了下载按钮，细看下面有一行小字 windows installer，说明我们找到TeXstudio的windows系统安装包啦，冰淇淋小姐可以愉快的点击下载按钮下载啦。\n![](/imgs/latex/l12.png)\n\n## 2.3点击下载按钮后，请等待5秒钟，下载就开始啦。\n下载完成后双击安装包即可开始TeXstduio的安装，TeXstduio的安装很简单，到了选择安装路径那一步，像上面安装MikTex一样检查是否有中文即可，其他的直接一路确定进行安装就好啦~\n\n## 2.4 至此，我们的编辑器就安装好啦\n\n\n# 三、解决LaTex恼人的中文乱码问题\n\n## 3.1 LaTex中文支持。\nLaTex系统的创造者为美国人，在创造LaTex时没有考虑到亚洲语言的支持问题，所以LaTex原生不支持中文，所幸诸位大神们各显神通，通过导入宏包的方式可以解决中文问题。冰淇淋小姐作为地地道道的炎黄子孙，所学所用皆为中文，解决LaTex的中文乱码问题当然是大事一件。且网上的教程虽多，但不够细致，流觞君当初在解决该问题时耗时颇多，流觞君在此当然要为冰淇淋小姐填补此坑啦。\n\n总的来说有两种方法：CJK包法和CTEX包法。\nCJK包法又分编码为UTF8和编码为GBK两种，CTEX包法又有两种使用方法。\n冰淇淋小姐若想了解更多，请参考下面的博客：\n\n> https://www.cnblogs.com/dezheng/p/3874434.html\n\n下面通过跟着流觞君做几个小实验，编写几个LaTex文件，来了解如何解决中文问题，在跟着流觞君完成下面的几个实验的同时，我们编写的文件中会需要中文支持包，MikTex会自动帮我们下载安装，如遇到是否安装的询问，请同意。冰淇淋小姐做完小实验后，LaTex的中文环境就算真的安装配置好啦。\n\n## 3.2 打开我们的TeXstudio，如下图:\n\n选择 options->选择configure TeXstudio，然后按图片检查Default Compiler，将此项设置为XeLaTex。LaTex排版系统提供了许多编译器，而XeLaTex对中文支持较好，我们此处选择XeLaTex，然后确定。\n![](/imgs/latex/l13.png)\n\n## 3.3 配置好之后，我们来使用TeXstudio来编写我们的第一个LaTex文档。如图，请新建文档并写入下面内容。\n![](/imgs/latex/l14.png)\n\n## 3.4 写好后，如图编译运行：\n看看我们的结果，咦，我们的冰淇淋小姐哪去了？这，就是LaTex的中文编码问题啦，接下来让我们看看如何解决它。\n![](/imgs/latex/l15.png)\n\n## 3.5 简单使用又强大的CTEX法。\nCtex是国内开发的latex中文支持包，使用十分方便，而且支持的字体种类多，技术先进成熟，学会此法即可用LaTex愉快的开始中文排版啦\n![](/imgs/latex/l16.png)\n\n### 3.5.2 CTEX法二之导入ctexart类\n\n如图所示，修改第一行如图，然后点击编译运行即可。编译过程如较长请稍等，系统正在下载安装相关文件\n![](/imgs/latex/l17.png)\n\n## CJK包法：\nCJK包名为中日韩三国英文首字母组合，专为LaTex提供亚洲文字支持，此法历史悠久所以名气很大，实际使用较为繁琐，而且CJK包为德国大佬为亚洲同胞编写，ctex为国人编写，更符合中文习惯。\n\n本着能为冰淇淋减少一点麻烦就减少一点的原则，流觞君墙裂推荐冰淇淋小姐掌握ctex包法即可，当然聪明的冰淇淋小姐也应该了解一下CJK法，方便后面的学习。\n\n### 3.6.1 CJK包法一之UTF8编码法\n首先按照前面配置XeLaTex编译器一样，打开option->configure TeXstudio，将编译器设置为PdfLaTex. 请冰淇淋小姐，一定要设置为PdfLaTex哦，当初流觞君看网上教程由于没有这点说明，使用的是XeLaTex导致中文输出失败。接下来将文本编码格式设置为UTF8，设置好这两项后点确定。如下面两幅图所示：\n![](/imgs/latex/l18.png)\n![](/imgs/latex/l19.png)\n\n接下来请编写如下内容，然后编译运行，此处MiKTex会自动为我们安装CJK包支持，请稍等，安装完成后如无输出请重新点击编译运行，如下，中文输出成功\n![](/imgs/latex/l20.png)\n\n### 3.6.2 CJK包法之GBK编码法\n请按上面配置编译器为PdfLaTex, 编码为GBK，如下图\n![](/imgs/latex/l21.png)\n\n或者使用界面右下角的设置编码框设置编码为GBK\n![](/imgs/latex/l22.png)\n\n编写下面的内容，并编译运行\n![](/imgs/latex/l23.png)\n\n# 四、写在最后：\n\n完成上述实验，也就完整的搭建了MiKtex+TeXstudio+中文支持的适合国人使用的LaTex环境了。教程写的较细，相信冰淇淋小姐以及广大和冰淇淋小姐一样对安装环境头疼的小伙伴们只要按照教程一步步配置一定可以搭建好LeTex。流觞君没有选择直接为冰淇淋小姐代劳安装环境这件事，是希望冰淇淋小姐能够克服这种恐惧呀，学会安装软件这一小小的技能，以后必定受益无穷~\n\n## 结尾推荐一个很好的LaTex的平台—华师大的laTex教程：\n> http://math.ecnu.edu.cn/~latex/\n\n## 若有兴趣，也可关注我的github相关的LaTex库，里面包含了一些LaTex学习资料和自己练习的一些LaTex代码\n> https://github.com/fadelover/LatexNotes\n\n\n\n\n","categories":["LaTex"]},{"title":"笔记本无法连接校内eduroam wifi问题解决","url":"/2018/03/11/笔记本无法连接校内eduroam-wifi问题解决/","content":"\n学校加入了全球eduroam联盟，于是学校多了一个名为eduroam的可用wifi\n\n学校方面称每个帐号保障3台设备登录，每台保障10M带宽\n\n登录帐号为： 学号+本校邮箱地址\t\t默认密码为一卡通密码\n\n流觞君使用的是win10 64位系统，在使用笔记本电脑连接eduroam网络时，\n\n遭遇了明明帐号密码都正确无误的情况下，手机可以连接，笔记本电脑却无法连接的情况\n\n原因是Windows10系统无法正确配置该网络，因此我们需要手动配置，进行连接\n\n经过一番折腾，最终成功连接，特将解决之道记录在此。\n\n<!-- more -->\n\n<style>\nimg{\n    width: 70%;\n\theight: 70%;\n    padding-left: 10%;\n}\n</style>\n\n# 一、忘记eduroam网络\n这一步将原来的配置清空，防止对后面的操作造成影响，必须！！\n\n## 1、打开 “网络和Internet设置” ，如图\n\t\n![打开网络和Internet设置](/imgs/wifi/img1.png)\n\n## 2、打开无线网络，选择管理已知网络，在列表中找出eduroam,选中，选择忘记，如下图\n\n![管理已知网络](/imgs/wifi/img2.png)\n![忘记网络](/imgs/wifi/img3.png)\n\n# 二、手动添加网络\n由于系统对eudroam网络并不能自动启用正确的配置，导致无法连接，因此我们手动添加该网络并进行相关配置\n\n## 1、打开网络和共享中心，如下图，也可在 控制面板->网络和Internet 中找到网络和共享中心\n![打开网络和共享中心](/imgs/wifi/img4.png)\n\n## 2、选择设置新的连接或网络\n![设置新的连接](/imgs/wifi/img5.png)\n\n## 3、手动连接到无限网络\n![手动连接](/imgs/wifi/img6.png)\n\n## 4、如下图填写相关信息（此处以eudroam为例）\n注意网络名即为你要连接的wifi名，如为需要登录的wifi其安全类型为 WPA2 - 企业\n![填写信息](/imgs/wifi/img7.png) \n\n# 三、配置网络\n在上面添加好网络后，下面开始配置网络\n\n## 1、选择更改连接设置->安全->设置，如下图\n![配置1](/imgs/wifi/img8.png)\n\n## 2、如图取消勾选，然后点击确定\n![配置2](/imgs/wifi/img9.png)\n\n## 3、选择高级设置,按下图进行相关配置\n> 勾选指定身份验证模式->用户身份验证->保存凭据->输入正确的用户名和密码->确定\n\n![配置3](/imgs/wifi/img10.png)\n\n# 四、大功告成\n不出意外，我们进行连接时不再需要输入用户名和密码，系统会自动帮我们连接\n![成功](/imgs/wifi/img11.png)\n"},{"title":"Install Origin","url":"/2018/03/10/Install-Origin/","content":"\nOrigin 是知名的绘图软件，今日安装了origin2017Pro,在此记录下一些要点\n\n<!-- more -->\n\n流觞君在origin网站上注册了帐号（请自动忽略此处）\n\nusername:  fa\t\tpassword: general\n\n# 一、origin2017Pro 安装文件下载\n> 链接：https://pan.baidu.com/s/1HcA61aSqibQSVR_Oao3jmw 密码：580q\n\n下载后，解压文件夹中的压缩包，里面包含了安装和破解说明\n\n双击 setup.exe即可开始安装过程，安装和破解具体过程此处略\n\n# 二、origin安装app\n\norigin为我们提供了app功能，以提供支持LaTex、SPSS等软件的支持\n\n可能是由于补丁的原因，自动安装app失败，需手动从官网下载app文件（.opx文件）手动安装\n\napp下载网址如下（需登陆origin帐号）\n> https://www.originlab.com/Apps\n\n下载对应app文件后，打开origin，将app拖动到origin软件界面即会自动安装\n\n安装完成后，在软件右边侧边栏即可看到相应图标，app安装成功\n\n","tags":["software"]},{"title":"iptables","url":"/2018/03/09/iptables/","content":"\n>iptables，一个运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的流动与转送。在大部分的Linux系统上面，iptables是使用/usr/sbin/iptables来操作，文件则放置在手册页（Man page[2]）底下，可以通过 man iptables 指令获取。通常iptables都需要内核层级的模块来配合运作，Xtables是主要在内核层级里面iptables API运作功能的模块。\n因相关动作上的需要，iptables的操作需要用到超级用户的权限。\n\n<!-- more -->\n\n\t#清楚除已有iptables规则\n\tiptables -F\n\t# 允许本地回环接口(即运行本机访问本机)\n\tiptables -A INPUT -i lo -j ACCEPT\n\t# 允许已建立的或相关连的通行\n\tiptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n\t#允许所有本机向外的访问\n\tiptables -A OUTPUT -j ACCEPT\n\t# 允许访问22端口，以下几条相同，分别是22,80,443端口的访问\n\tiptables -A INPUT -p tcp --dport 22 -j ACCEPT\n\tiptables -A INPUT -p tcp --dport 80 -j ACCEPT\n\tiptables -A INPUT -p tcp --dport 443 -j ACCEPT\n\t#如果有其他端口的话，规则也类似，稍微修改上述语句就行\n\t#允许ping\n\tiptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT\n\t#禁止其他未允许的规则访问（注意：如果22端口未加入允许规则，SSH链接会直接断开。）\n\tiptables -A INPUT -j REJECT \n\tiptables -A FORWARD -j REJECT","categories":["linux"]},{"title":"Use RSA login VPS","url":"/2018/03/09/Use-RSA-login-VPS/","content":"\n近日闲来无事，决定加固一下自己的vps\n\n在此记录下操作过程\n\n目标： 实现RSA指纹登录，禁止密码登录\n\n<!-- more -->\n\n# 一、在客户端生成RSA密匙\n打开git客户端，在windows上生成RSA密钥\n> ssh-keygen -t rsa #生成RSA密匙，后面按提示配置\n> cd ~            #回到用户家目录，生成的密钥在此\n> cd ./ssh && ls  #进入ssh密钥目录\n> cat id_rsa.pub  #输出公钥内容\n\n复制生成的公钥字符串（待会儿要写入服务器配置文件中）\n\n# 二、将密钥配置到服务器\n将上一步公钥写入服务器\n> vi .ssh/authorized_keys  #将密钥复制进去\n\n配置文件权限\n> chmod 600 .ssh/authorized_keys\n\n# 三、修改SSH配置文件\n开启密钥验证关闭密码登录\n> vi /etc/ssh/sshd_config\n\n修改以下行\n> #启用密钥验证\n> RSAAuthentication yes\n> PubkeyAuthentication yes\n> #指定公钥数据库文件\n> AuthorsizedKeysFile.ssh/authorized_keys\n> PasswordAuthentication no\n\n修改ssh登录端口\n> port 2000   #修改成你想要的端口\n\n重启sshd服务使配置生效\n> systemctl restart sshd\n\n# 四、配置xshell登录\n1、使用public key验证\n2、选择自己的私钥\n3、进行登录即可\n","tags":["linux环境搭建"]},{"title":"Hexo-Use","url":"/2018/03/08/Hexo-Use/","content":"\n博客总算有了雏形，在此记录下hexo使用心得\n\n# 参考资料\n\n[hexo 官方文档][1]\n\n[hexo中next主题官方文档][2]\n\n[markdown官方教程][3]\n\n[markdown推荐教程][4]\n\n[1]: https://hexo.io/docs/\n[2]: http://theme-next.iissnan.com/theme-settings.html\n[3]: https://www.appinn.com/markdown/\n[4]: https://segmentfault.com/markdown\n\n<!-- more -->\n\n# hexo常用命令\n\n\t> hexo new post \"post_name\"   #创建新文章\n\n\t> hexo new page \"page_name\"   #创建新页面\n\n\t> hexo version \t#查看版本\n\n\t> hexo init\t\t#初始化\n\n\t> hexo clean    #清空缓存\n\n\t> hexo generate\t#收集文件\n\n\t> hexo server   #本机运行\n\n\t> hexo depoly   #部署网站\n\t\n# 博客写作注意\n\n>comments: false   #在title出注明此行可关闭评论\n>#<!-- more -->\t   #在博客合适位置放置此标记\n\n# 关掉每篇博文的伴生文件夹\n编辑  _config.yml 文件夹，将下面项设置为false\n> post_asset_folder: false\n\n# 使用编辑模板\n模板文件在scaffolds文件夹下，编辑post.md文件，以后新建的post文档都使用该模板"},{"title":"liushang's Blog","url":"/2018/03/07/fadelover-s-Blog/","content":"流觞君的Blog\n\t\n凝聚生活智慧，留存学习心得~\n\n<!-- more -->\n\t\n\t\n"},{"title":"pdfcrack and fcrackzip","url":"/2018/01/29/kali_pdfcrack/","content":"系统环境： kali linux 64bit\n在kali linux上利用 pdfcrack工具破解pdf文件密码\n利用fcrackzip破解zip文件的弱密码\n利用sslscan获取ssl证书信息\n<!-- more -->\n\n# pdfcrack\n## 安装pdfcrack\n> apt-get update -y\n> apt install pdfcrack -y\n\n## 开始pdfcrack\n此处使用word2016生成的pdf，命名为pdf_name.pdf，设置的密码为123456789\n> pdfcrack -f pdf_name.pdf -n 6 -m 9 -c 0123456789\n> 对pdf_name.pdf文件进行破解，密码最短为6位，最长为9位，密码字符集为0123456789\n开始漫长的等待~\n\n## 使用密码字典\n> pdfcrack -f pdf_name.pdf -w passwordlist.txt\n\n# fcrackzip\n## 安装fcrackzip(kali自带)\n> apt-get install fcrackzip -y\n> man fcrackzip   #查看fcrackzip的信息，可忽略\n\n## 创建测试用zip文件\n> cd ~\n> mkdir test\n> cd test   #创建测试用文件夹后进入该文件夹\n> echo \"Hello world\" >> hello.txt  # 创建测试txt文件\n> zip --password 123456 hello.zip hello.txt  #zip命令先写压缩后文件名，再写要压缩的文件名\n> 设置密码为123456\n\n## 开始破解\n> fcrackzip -b -c 'aA1!' -l 1-10 -u zip_name.zip  #指定使用-b(brute-force)穷举法，指定字符集为大小写字母数字和字符 指定破解文件为zip_name.zip\n>fcarckzip -D -p /root/password_list.txt -u zip_name.zip\n>使用密码字典破解\n\n\n\n# SSLscan\n## 扫描百度\n> sslscan baidu.com  #会返回一系列信息\n参考博客：\n> http://topspeedsnail.com/use-sslscan-get-ssl-info/","categories":["linux"]},{"title":"linux上网","url":"/2018/01/29/linux上网/","content":"系统： kali 64bit\n\n在debian类系统上安装chrome浏览器\n<!-- more -->\n\n# 安装Chrome\n## 更新源\n> apt-get update -y && apt-get upgrade -y\n\n## 下载安装包到本地\n> 下载 chrome linux64.deb安装包到本地，此处假定文件名为  chrome_64bit.deb\n\n## 开始安装\n> dpkg -i chrome_64bit.deb\n报错，依赖未安装\n> apt-get install libappindicator1 -y\n> apt --fix-broken install  #修复损坏依赖\n> dpkg -i chrome_64bit.deb  #重新安装\n\n## 启动\nchrome默认不能用root用户启动，解决方法可以创建非root用户启动，或者使用如下命令\n> /usr/bin/google-chrome --no-sandbox - -user-data-dir &\n\n# 安装S—\n## 下载文件\n> cd /root/s~\n> git clone https://github.com/ssrbackup/shadowsocksr\n\n## 配置\n> cp -Rf shadowsocksr /etc/local/\n> cd /etc/local/shadowsocksr\n> vi config.json   #填好配置\n> cp config.json /etc/ss.json\n\n## 本地启动\n> cd /etc/local/shadowsocksr/shadowsocks/\n> python local.py -c /etc/ss.json -d  #后台运行\n\n# 结合SwitchyOmega 使用","categories":["linux"]},{"title":"猫眼电影评分获取","url":"/2018/01/19/python3爬取猫眼电影评分/","content":"python版本： python3.6.4 64bit\n\n爬取猫眼电影上的文章评分，个人学习记录，非学习教程~\n<!-- more -->\n\npython爬取流程： 网页抓取器-> 网页解析器 -> 文件保存器\n关键在于正则表达式的构建\n\n在windows下会出现麻烦的编码问题，最好在linux上运行\n\n代码如下： \n\n\t# python3\n\t# _*_ coding:utf-8 _*_\n    \n\timport re  # 导入正则表达式库\n\timport json  # 导入json库\n\tfrom multiprocessing import Pool  # 导入python内置的多线程\n\timport requests  # 导入request库获取网页信息\n\tfrom requests.exceptions import RequestException\n    \n    \n\theaders = {\"User-agent\": \"Mozilla/5.0\"}  # 浏览器头部信息\n    \n    \n\tdef get_one_page(url):    # 获取一个页面\n\t    try:\n\t        res = requests.get(url, headers=headers)\n\t        if res.status_code == 200:\n\t            return res.text\n\t        return None\n\t    except RequestException:\n\t        return None\n    \n    \n\tdef parse_one_page(html):  # 解析一个页面\n    \n\t    pattern = re.compile('<dd>.*?board-index.*?>(\\d+)</i>.*?data-src=\"(.*?)\".*?name\"><a' +\n\t                         '.*?>(.*?)</a>.*?star\">(.*?)</p>.*?releasetime\">(.*?)</p>' + '.*?integer\">(.*?)</i>.*?fraction\">(.*?)</i>.*?</dd>', re.S)\n\t    # 正则表达式匹配\n\t    items = re.findall(pattern, html)   # 正则表达式处理字符串，找到所有上一步中匹配的记录\n\t    for item in items:\n\t        yield{\n\t            'index': item[0],\t\t\t# 提取出列表中的信息\n\t            'image': item[1],\n\t            'title': item[2],\n\t            'actor': item[3].strip()[3:],\n\t            'time': item[4].strip()[5:],\n\t            'score': item[5]+item[6]\n\t        }\n    \n    \n\tdef write_to_file(content):             # 将解析器获取到的信息写入文件之中\n\t    with open('result.txt', 'a', encoding='utf-8') as f:\n\t        # 有中文字符，关闭ascii编码，加上换行符\n\t        f.write(json.dumps(content, ensure_ascii=False)+'\\n')\n\t        f.close()    # 关闭\n    \n    \n\tdef main(offset):\n\t    url = 'http://maoyan.com/board/4?offset='+str(offset)   # 构造榜单页面url\n    \n\t    html = get_one_page(url)    # 获取html页面\n\t    for item in parse_one_page(html):  # 解析html页面的信息\n\t        print(item)                    # 输出解析信息\n\t        write_to_file(item)\t\t\t   # 信息写入文件\n    \n\t    # if __name__ == '__main__':\t\t # 这段原理没搞清楚所以注释掉\n\t    #     p = Pool(10)                     # 创建具有10个进程的进程池\n\t    #     p.map(main, [ i*10 for i in range(10) ])   # 使用多线程爬取\n\t    #     p.close()  # 关闭进程池，不再接受新的进程\n\t    \n\tfor i in range(10):\n\t\tmain(i*10)\n","categories":["python"]},{"title":"linux 命令","url":"/2018/01/19/linux日常使用1/","content":"系统：ubuntu18.04 64bit\n命令是日积月累的，在此记录下自己使用过的linux命令\n\n<!-- more -->\n## 系统有关\n> lsb_release -a #大部分linux都适用，查看当前系统的所有版本信息\n> \n\n## 软件有关\n> service apache2 start #Debian类系统启动apache,访问本机地址查看是否成功\n\n## shell\n\n```\ncat /etc/shells #查看存在的shell\necho $SHELL #查看当前使用的shell\nchsh -s /bin/bash #切换到bash\nchsh -s /bin/zsh  #切换到zsh\n```\n\n","categories":["linux"]},{"title":"Matlab 之神经网络初体验","url":"/2018/01/07/Matlab-之神经网络初体验/","content":"软件版本：Matlab2014a\n利用matlab自带数据集和函数实现一些简单的神经网络\n<!-- more -->\n# 鸢尾花数据集下的SVM实现\n##数据集介绍：\n它最初是埃德加·安德森从加拿大加斯帕半岛上的鸢尾属花朵中提取的地理变异数据，\n后由罗纳德·费雪作为判别分析的一个例子，运用到统计学中。其数据集包含了150个样本，都属于\n鸢尾属下的三个亚属，分别是山鸢尾、变色鸢尾和维吉尼亚鸢尾。四个特征被用作样本的定量分析，\n它们分别是花萼和花瓣的长度和宽度。基于这四个特征的集合，费雪发展了一个线性判别分析以确定其属种。\n**维基百科介绍**： \n>https://zh.wikipedia.org/wiki/%E5%AE%89%E5%BE%B7%E6%A3%AE%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%8D%89%E6%95%B0%E6%8D%AE%E9%9B%86\n\n**数据来源**：\n>http://archive.ics.uci.edu/ml/\n>数据集为两个矩阵meas和species\n>矩阵meas为150*4矩阵，存储了花的四个属性，分别为花萼长、花萼宽、花瓣长、花瓣宽，单位为cm\n>矩阵species为150*1矩阵，存储了三个种群的信息，每个种群数量为50\n\n## 代码\n\n    %SVM 支持向量机\n    load fisheriris;                        %fisheriris  是一个数据集。\n    X = [meas(:,1), meas(:,2)];             %提取前两个特征。\n    Y = nominal(ismember(species,'setosa')); %SVM只能识别两类，获取Setosa类数据在species中的标记，Y中存储的相应位置的出现或不出现（True or False）。\n    P = cvpartition(Y,'Holdout',0.20);       %将Y中20%作为测试数据，其余为训练数据。\n    svmStruct =svmtrain(X(P.training,:),Y(P.training),'showplot',true);\n    C =svmclassify(svmStruct,X(P.test,:),'showplot',true);\n    errRate = sum(Y(P.test)~=C)/P.TestSize;   %统计分类错误率\n\n# BP神经网络\n## Matlab代码\n\n    %BP神经网络\n    clear all; clc;\n    load simplefit_dataset; %导入数据集，为两个矩阵，一个1*94的输入矩阵和1*94的输出矩阵\n    [Input,Target] = simplefit_dataset;\n    \n    net = feedforwardnet([10,8]);  %创建神经网络\n    %view(net)   %查看神经网络的结构\n    net = train(net,Input,Target);  %使用训练集训练网络\n    y = net(Input);     %使用训练后的网络产生目标值\n    \n    Perform = perform(net,y,Target) %查看网络性能\n    figure(1)\n    plot(Input,Target,'yo-');\n    hold on\n    plot(Input,y,'r*-');   %绘图查看符合程度，可以看到符合程度很高\n\n\n","categories":["Matlab"]},{"title":"anaconda3","url":"/2017/06/05/anaconda3/","content":"\n# anaconda3\n\nanaconda 搭建python环境\n\n<!-- more -->\n\n\n\n## 安装 \n\n更换中科大的源\n\n```python\nconda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\nconda config --set show_channel_urls yes\n```\n\n移除源\n\n```\nconda config --remove channels 'https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/' \n```\n\n\n\n安装tensorflow\n\n``` bash\nconda create -n tensorflow python=3.5 tensorflow pandas matplotlib scipy numpy\n# environment location: G:\\Apps\\Dev\\Anaconda3\\envs\\tensorflow\nconda activate tensorflow\nconda install -n env_name pkg_name  #最好使用conda安装相应的包\n```\n\n虚拟环境的激活和使用\n\n```bash\n# windows\nactivate tensorflow   \ndeactivate tensorflow\n# linux or mac\nsource activate tensorflow\nsource deactivate tensorflow\n#删除一个环境\nconda remove -n tensorflow --all  \n```\n\n## 使用\n\n```\n# linux下权限问题\n# 由于 anaconda3安装在 /opt 目录下，会产生权限问题\nsudo chmod -Rf 777 /opt/anaconda3 #改权限\n# R 表示递归，f表强制 三个7分别表示所有者，所属组，其他用户均具有读写执行权限\n# 若产生代理问题，查看是否在系统中设置了代理\n```\n\n\n\n``` bash\nconda list  #查看当前环境中已安装的包\nconda list -n tensorflow #查看指定环境中已安装的包\nconda search numpy #查看包的信息\nconda install -n tensorflow numpy #在指定环境中安装包\nconda update -n tensorflow numpy #更新指定环境中的包\nconda remove -n tensorflow numpy #移除指定环境中的包\n```\n\n## 更新\n\n```bash\nconda update conda  #更新自身\nconda update all    #更新所有\n```\n\n\n\n## PowerShell配置\n\n在anaconda prompt 和 cmd中，激活方法如下：\n\n```\nactivate env_name\n```\n\n但在PoweeShell中不可用，解决方法如下：\n\n1. 安装库：\n\n```\nconda install -n root -c pscondaenvs pscondaenvs\n```\n\n具体链接： https://github.com/BCSharp/PSCondaEnvs\n\n2. 更改PowerShell配置：\n\n   以管理员身份启动PowerShell，并执行`Set-ExecutionPolicy RemoteSigned`\n\n```\nPS C:\\WINDOWS\\system32> Set-ExecutionPolicy RemoteSigned\n更执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如http://go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies帮助主题所述。是否要更改执行策略?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助(默认值为“N”):Y\n```\n\n然后就可以正常使用activate来激活虚拟环境了。\n\n## git-bash配置\n\nMinTTY不支持交互操作，直接输入python会卡住，需要额外配置，如Python和Node, 用winpty + program就可以运行了 \n\n```\nvi  /etc/bash.bashrc #添加下面一行\nalias python='winpty python'\n```\n\n## VS Code配置\n\n``` json\n{\n    \"python.pythonPath\":\"G:/Apps/Dev/Anaconda3/envs/tensorflow/python.exe\", \n    \"terminal.integrated.shell.windows\": \"G:\\\\Apps\\\\Dev\\\\Git\\\\bin\\\\bash.exe\" \n}\n```\n\n","categories":["python"]},{"title":"Mathematica","url":"/2017/04/05/Mathematica/","content":"\n# Mathematica\n\n[wolfram官方快速入门教程]: http://www.wolfram.com/language/fast-introduction-for-programmers/zh/interactive-usage/\t\"wolfram快速入门\"\n\n<!-- more -->\n\n### 交互式用法\n\n* 直接像在命令行中那样输入命令，如 3+4 ，按shift+enter即可进行计算\n\n### 基本语法\n\n* wolfram语言中的一切都是符号表达式.\n* 对于字母严格区分大小写，默认常量一般为大写字母，自带函数开头也为大写字母。\n* 函数和命令后面的表达式要放入[]内，矩阵、列表，函数等不像matlab中一样使用（），而是使用[]\n* **注释:**      (* 注释内容 *)*\n* **简单运算**： 乘法用*或者空格，除法用 “/”表示，乘方用“^”表示\n* **赋值:** 1、直接赋值： a=1  2、延迟赋值： t:=4  延迟赋值为只在需要的时候才计算变量值\n\n\t\t\t\t\t\t\t\t\t **一些常用的常数**\n\n| 常数 |   数学含义    |      常数       |      数学含义      |\n| :--: | :-----------: | :-------------: | :----------------: |\n|  Pi  |   圆周率pi    |    Infinity     |   无穷大$\\infin$   |\n|  E   | 自然对数的底e |    -Infinity    |      负无穷大      |\n|  I   | 虚数单位： i  | ComplexInfinity | 复平面上的无穷远点 |\n\n​\t\t\t\t\t\t\t\t\t** 一些常用的函数 **\n\n|     函数      |     数学含义     |        函数        |     数学含义      |\n| :-----------: | :--------------: | :----------------: | :---------------: |\n|    Abs[x]     |      \\|x\\|       |       Exp[x]       |      $e^{x}$      |\n|     Im[x]     |       虚部       |      Log[a,x]      |   $log_{a}^{x}$   |\n|     Re[x]     |       实部       |      Sqrt[x]       |    $\\sqrt{x}$     |\n|     Max[]     |      最大值      |       Tan[x]       |     $\\tan{x}$     |\n|     Min[]     |      最小值      |       Sin[x]       |     $\\sin{x}$     |\n|    N[x,n]     | 取x的n位有效数字 |       Cos[x]       |     $\\sin{x}$     |\n|   Mod[a,b]    |    a/b的余数     |       Cot[x]       |     $\\cot{x}$     |\n|   Prime[n]    |    第n个素数     | ArcSin[x]:其余类推 |   $\\arcsin{x}$    |\n|    Arg[x]     | argz 幅角的主值  |      Floor[x]      | 不大于x的最大整数 |\n| Binomial[n,m] |   $C_{n}^{m}$    |      Round[x]      |   最接近x的整数   |\n| Conjugate[x]  |   z的共轭复数    |     Ceiling[x]     | 不小于x的最小整数 |\n\nFloor[x]  不大于x的最大整数      Round[x]  最接近x的整数      Ceiling[x]  不小于x的最小整数\n\n* 列表： 用｛｝表示，如｛1,2,3,x,y,x+y,{a,b,1}｝\n  * 列表索引从1开始\n  * 使用[[]]对列表元素进行提取，如 ｛a,b,c,d｝[[3]]=c\n  * 使用负数索引，最后一个元素为 -1 ，倒数第二个为 -2，依次类推\n  * 线性操作： \n    * ｛1,2,3｝+2 ={3,4,5}\n    * {1,2,3}+{a,b,c}={1+a,2+b,c+d}\n    * 取多行，多列，与matlab的：不同，mathematica使用 ;;  eg: {a,b,c,d,e}[[2;;3]]\n    *  \n\n### 命令：\n\nmathematica内置了很多命令，命令的首字母一般大写，命名规则与python的函数命名规则相同，下面记录一些常用的命令：\n\n* Table[]： eg: Table[x^2,{x,10}]=｛1,4,9,16,25,36,49,64,81,100｝","categories":["Mathematica"]},{"title":"Centos7 use","url":"/2017/04/05/Centos7-use/","content":"# yum的使用\n\n<!-- more -->\n\n> yum clean headers/packages/all  #清理软件包/头文件/所有\n\n# 使用gcc编译c程序\n> vi C_name.c   #编写C代码 \n> gcc -o exe_name C_name.c   #使用gcc编译，指定输出文件名为 exe_name\n> # 也可直接使用 gcc C_name.c\n> ./exe_name     #执行编译后的程序，查看结果\n\n# 查看BBR是否开启\n> lsmod | grep bbr  #输出含tcp_bbr即可\n","categories":["CentOS7环境搭建"]},{"title":"BP神经网络","url":"/2017/04/05/BP神经网络/","content":"\n\n\n# BP神经网络\n\nBack Propagation, 反向传播神经网络\n\nBP神经网络的输入和输出是一个“多输入-多输出”、高度非线性的影射关系，为一黑箱系统。\n\n提高精度的两种方法：\n\n* 增加层数能提高精度，降低误差，但是同时使得网络复杂化，增加了网络训练时间。\n* 增加隐层中的神经元数目也可提高精度，其训练效果也比增加层数更容易观察和调整，因此一般情况下，应该优先考虑增加隐层的神经元数目\n\n","categories":["ML"]}]